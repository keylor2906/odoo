# SOME DESCRIPTIVE TITLE.
# Copyright (C) Odoo S.A.
# This file is distributed under the same license as the odoo package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
msgid ""
msgstr ""
"Project-Id-Version: odoo 9.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-02-22 23:10-0600\n"
"PO-Revision-Date: 2016-02-26 20:43-0600\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.0\n"
"Last-Translator: Nhomar Hernández <nhomar@vauxoo.com>\n"
"Language-Team: \n"
"X-Generator: Poedit 1.8.7\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"Language: es\n"
"X-Poedit-SourceCharset: UTF-8\n"

#: ../../howtos/website.rst:7
msgid "Building a Website"
msgstr "Construyendo un Website"

#: ../../howtos/website.rst:11
msgid ""
"This guide assumes `basic knowledge of Python <http://docs.python.org/2/"
"tutorial/>`_"
msgstr ""

#: ../../howtos/website.rst:13
msgid "This guide assumes :ref:`an installed Odoo <setup/install>`"
msgstr ""

#: ../../howtos/website.rst:16
msgid "Creating a basic module"
msgstr ""

#: ../../howtos/website.rst:18
msgid "In Odoo, tasks are performed by creating modules."
msgstr ""

#: ../../howtos/website.rst:20
msgid ""
"Modules customize the behavior of an Odoo installation, either by adding "
"new behaviors or by altering existing ones (including behaviors added by "
"other modules)."
msgstr ""

#: ../../howtos/website.rst:24
msgid ""
":ref:`Odoo's scaffolding <reference/cmdline/scaffold>` can setup a basic "
"module. To quickly get started simply invoke:"
msgstr ""

#: ../../howtos/website.rst:31
msgid ""
"This will automatically create a ``my-modules`` *module directory* with an "
"``academy`` module inside. The directory can be an existing module "
"directory if you want, but the module name must be unique within the "
"directory."
msgstr ""

#: ../../howtos/website.rst:39
msgid "A demonstration module"
msgstr ""

#: ../../howtos/website.rst:41
msgid "We have a \"complete\" module ready for installation."
msgstr ""

#: ../../howtos/website.rst:43
msgid "Although it does absolutely nothing we can install it:"
msgstr ""

#: ../../howtos/website.rst:45
msgid "start the Odoo server"
msgstr ""

#: ../../howtos/website.rst:51
msgid "go to http://localhost:8069"
msgstr ""

#: ../../howtos/website.rst:52
msgid "create a new database including demonstration data"
msgstr ""

#: ../../howtos/website.rst:53
msgid "to go :menuselection:`Settings --> Modules --> Modules`"
msgstr ""

#: ../../howtos/website.rst:54
msgid ""
"in the top-right corner remove the *Installed* filter and search for "
"*academy*"
msgstr ""

#: ../../howtos/website.rst:56
msgid "click the :guilabel:`Install` button for the *Academy* module"
msgstr ""

#: ../../howtos/website.rst:59
msgid "To the browser"
msgstr ""

#: ../../howtos/website.rst:61
msgid ""
":ref:`Controllers <reference/http/controllers>` interpret browser requests "
"and send data back."
msgstr ""

#: ../../howtos/website.rst:64
msgid ""
"Add a simple controller and ensure it is imported by ``__init__.py`` (so "
"Odoo can find it):"
msgstr ""

#: ../../howtos/website.rst:69
msgid "Shut down your server (:kbd:`^C`) then restart it:"
msgstr ""

#: ../../howtos/website.rst:75
msgid ""
"and open a page to http://localhost:8069/academy/academy/, you should see "
"your \"page\" appear:"
msgstr ""

#: ../../howtos/website.rst:81
msgid "Templates"
msgstr ""

#: ../../howtos/website.rst:83
msgid "Generating HTML in Python isn't very pleasant."
msgstr ""

#: ../../howtos/website.rst:85
msgid ""
"The usual solution is templates_, pseudo-documents with placeholders and "
"display logic. Odoo allows any Python templating system, but provides its "
"own :ref:`QWeb <reference/qweb>` templating system which integrates with "
"other features."
msgstr ""

#: ../../howtos/website.rst:90
msgid ""
"Create a template and ensure the template file is registered in the "
"``__openerp__.py`` manifest, and alter the controller to use our template:"
msgstr ""

#: ../../howtos/website.rst:95
msgid ""
"The templates iterates (``t-foreach``) on all the teachers (passed through "
"the *template context*), and prints each teacher in its own paragraph."
msgstr ""

#: ../../howtos/website.rst:98
msgid ""
"Finally restart Odoo and update the module's data (to install the "
"template) by going to :menuselection:`Settings --> Modules --> Modules --> "
"Academy` and clicking :guilabel:`Upgrade`."
msgstr ""

#: ../../howtos/website.rst:104
msgid ""
"Alternatively, Odoo can be restarted :option:`and update modules at the "
"same time<odoo.py -u>`:"
msgstr ""

#: ../../howtos/website.rst:111
msgid "Going to http://localhost:8069/academy/academy/ should now result in:"
msgstr ""

#: ../../howtos/website.rst:116
msgid "Storing data in Odoo"
msgstr ""

#: ../../howtos/website.rst:118
msgid ":ref:`Odoo models <reference/orm/model>` map to database tables."
msgstr ""

#: ../../howtos/website.rst:120
msgid ""
"In the previous section we just displayed a list of string entered "
"statically in the Python code. This doesn't allow modifications or "
"persistent storage so we'll now move our data to the database."
msgstr ""

#: ../../howtos/website.rst:125
msgid "Defining the data model"
msgstr ""

#: ../../howtos/website.rst:127
msgid ""
"Define a teacher model, and ensure it is imported from ``__init__.py`` so "
"it is correctly loaded:"
msgstr ""

#: ../../howtos/website.rst:132
msgid ""
"Then setup :ref:`basic access control <reference/security/acl>` for the "
"model and add them to the manifest:"
msgstr ""

#: ../../howtos/website.rst:137
msgid ""
"this simply gives read access (``perm_read``) to all users (``group_id:"
"id`` left empty)."
msgstr ""

#: ../../howtos/website.rst:142
msgid ""
":ref:`Data files <reference/data>` (XML or CSV) must be added to the "
"module manifest, Python files (models or controllers) don't but have to be "
"imported from ``__init__.py`` (directly or indirectly)"
msgstr ""

#: ../../howtos/website.rst:148
msgid ""
"the administrator user bypasses access control, they have access to all "
"models even if not given access"
msgstr ""

#: ../../howtos/website.rst:152
msgid "Demonstration data"
msgstr ""

#: ../../howtos/website.rst:154
msgid ""
"The second step is to add some demonstration data to the system so it's "
"possible to test it easily. This is done by adding a ``demo`` :ref:`data "
"file <reference/data>`, which must be linked from the manifest:"
msgstr ""

#: ../../howtos/website.rst:162
msgid ""
":ref:`Data files <reference/data>` can be used for demo and non-demo data. "
"Demo data are only loaded in \"demonstration mode\" and can be used for "
"flow testing and demonstration, non-demo data are always loaded and used "
"as initial system setup."
msgstr ""

#: ../../howtos/website.rst:167
msgid ""
"In this case we're using demonstration data because an actual user of the "
"system would want to input or import their own teachers list, this list is "
"only useful for testing."
msgstr ""

#: ../../howtos/website.rst:172
msgid "Accessing the data"
msgstr ""

#: ../../howtos/website.rst:174
msgid ""
"The last step is to alter model and template to use our demonstration data:"
msgstr ""

#: ../../howtos/website.rst:176
msgid "fetch the records from the database instead of having a static list"
msgstr ""

#: ../../howtos/website.rst:177
msgid ""
"Because :meth:`~openerp.models.Model.search` returns a set of records "
"matching the filter (\"all records\" here), alter the template to print "
"each teacher's ``name``"
msgstr ""

#: ../../howtos/website.rst:183
msgid ""
"Restart the server and update the module (in order to update the manifest "
"and templates and load the demo file) then navigate to http://"
"localhost:8069/academy/academy/. The page should look slightly different: "
"names should simply be prefixed by a number (the database identifier for "
"the teacher)."
msgstr ""

#: ../../howtos/website.rst:190
msgid "Website support"
msgstr ""

#: ../../howtos/website.rst:192
msgid "Odoo bundles a module dedicated to building websites."
msgstr ""

#: ../../howtos/website.rst:194
msgid ""
"So far we've used controllers fairly directly, but Odoo 8 added deeper "
"integration and a few other services (e.g. default styling, theming) via "
"the ``website`` module."
msgstr ""

#: ../../howtos/website.rst:198
msgid "first, add ``website`` as a dependency to ``academy``"
msgstr ""

#: ../../howtos/website.rst:199
msgid ""
"then add the ``website=True`` flag on the controller, this sets up a few "
"new variables on :ref:`the request object <reference/http/request>` and "
"allows using the website layout in our template"
msgstr ""

#: ../../howtos/website.rst:202
msgid "use the website layout in the template"
msgstr ""

#: ../../howtos/website.rst:206
msgid ""
"After restarting the server while updating the module (in order to update "
"the manifest and template) access http://localhost:8069/academy/academy/ "
"should yield a nicer looking page with branding and a number of built-in "
"page elements (top-level menu, footer, …)"
msgstr ""

#: ../../howtos/website.rst:213
msgid ""
"The website layout also provides support for edition tools: click :"
"guilabel:`Sign In` (in the top-right), fill the credentials in "
"(``admin`` / ``admin`` by default) then click :guilabel:`Log In`."
msgstr ""

#: ../../howtos/website.rst:217
msgid ""
"You're now in Odoo \"proper\": the administrative interface. For now click "
"on the :guilabel:`Website` menu item (top-left corner."
msgstr ""

#: ../../howtos/website.rst:220
msgid ""
"We're back in the website but as an administrator, with access to advanced "
"edition features provided by the *website* support:"
msgstr ""

#: ../../howtos/website.rst:223
msgid ""
"a template code editor (:menuselection:`Customize --> HTML Editor`) where "
"you can see and edit all templates used for the current page"
msgstr ""

#: ../../howtos/website.rst:225
msgid ""
"the :guilabel:`Edit` button in the top-left switches to \"edition mode\" "
"where blocks (snippets) and rich text edition are available"
msgstr ""

#: ../../howtos/website.rst:227
msgid ""
"a number of other features such as mobile preview or :abbr:`SEO (Search "
"Engine Optimization)`"
msgstr ""

#: ../../howtos/website.rst:231
msgid "URLs and routing"
msgstr ""

#: ../../howtos/website.rst:233
msgid ""
"Controller methods are associated with *routes* via the :func:`~openerp."
"http.route` decorator which takes a routing string and a number of "
"attributes to customise its behavior or security."
msgstr ""

#: ../../howtos/website.rst:237
msgid ""
"We've seen a \"literal\" routing string, which matches a URL section "
"exactly, but routing strings can also use `converter patterns`_ which "
"match bits of URLs and make those available as local variables. For "
"instance we can create a new controller method which takes a bit of URL "
"and prints it out:"
msgstr ""

#: ../../howtos/website.rst:244
msgid ""
"restart Odoo, access http://localhost:8069/academy/Alice/ and http://"
"localhost:8069/academy/Bob/ and see the difference."
msgstr ""

#: ../../howtos/website.rst:247
msgid ""
"As the name indicates, `converter patterns`_ don't just do extraction, "
"they also do *validation* and *conversion*, so we can change the new "
"controller to only accept integers:"
msgstr ""

#: ../../howtos/website.rst:253
msgid ""
"Restart Odoo, access http://localhost:8069/academy/2, note how the old "
"value was a string, but the new one was converted to an integers. Try "
"accessing http://localhost:8069/academy/Carol/ and note that the page was "
"not found: since \"Carol\" is not an integer, the route was ignored and no "
"route could be found."
msgstr ""

#: ../../howtos/website.rst:259
msgid ""
"Odoo provides an additional converter called ``model`` which provides "
"records directly when given their id. Let's use this to create a generic "
"page for teacher biographies:"
msgstr ""

#: ../../howtos/website.rst:265
msgid "then change the list of model to link to our new controller:"
msgstr ""

#: ../../howtos/website.rst:269
msgid ""
"Restart Odoo and upgrade the module, then you can visit each teacher's "
"page. As an exercise, try adding blocks to a teacher's page to write a "
"biography, then go to another teacher's page and so forth. You will "
"discover, that your biography is shared between all teachers, because "
"blocks are added to the *template*, and the *biography* template is shared "
"between all teachers, when one page is edited they're all edited at the "
"same time."
msgstr ""

#: ../../howtos/website.rst:277
msgid "Field edition"
msgstr ""

#: ../../howtos/website.rst:279
msgid ""
"Data which is specific to a record should be saved on that record, so let "
"us add a new biography field to our teachers:"
msgstr ""

#: ../../howtos/website.rst:284
msgid ""
"Restart Odoo and update the views, reload the teacher's page and… the "
"field is invisible since it contains nothing."
msgstr ""

#: ../../howtos/website.rst:290
msgid ""
"For record fields, templates can use a special ``t-field`` directive which "
"allows editing the field content from the website using field-specific "
"interfaces. Change the *person* template to use ``t-field``:"
msgstr ""

#: ../../howtos/website.rst:296
msgid ""
"Restart Odoo and upgrade the module, there is now a placeholder under the "
"teacher's name and a new zone for blocks in :guilabel:`Edit` mode. Content "
"dropped there is stored in the corresponding teacher's ``biography`` "
"field, and thus specific to that teacher."
msgstr ""

#: ../../howtos/website.rst:301
msgid ""
"The teacher's name is also editable, and when saved the change is visible "
"on the index page."
msgstr ""

#: ../../howtos/website.rst:304
msgid ""
"``t-field`` can also take formatting options which depend on the exact "
"field. For instance if we display the modification date for a teacher's "
"record:"
msgstr ""

#: ../../howtos/website.rst:309
msgid ""
"it is displayed in a very \"computery\" manner and hard to read, but we "
"could ask for a human-readable version:"
msgstr ""

#: ../../howtos/website.rst:314
msgid "or a relative display:"
msgstr ""

#: ../../howtos/website.rst:319
msgid "Administration and ERP integration"
msgstr ""

#: ../../howtos/website.rst:322
msgid "A brief and incomplete introduction to the Odoo administration"
msgstr ""

#: ../../howtos/website.rst:324
msgid ""
"The Odoo administration was briefly seen during the `website support`_ "
"section. We can go back to it using :menuselection:`Administrator --> "
"Administrator` in the menu (or :guilabel:`Sign In` if you're signed out)."
msgstr ""

#: ../../howtos/website.rst:328
msgid "The conceptual structure of the Odoo backend is simple:"
msgstr ""

#: ../../howtos/website.rst:330
msgid ""
"first are menus, a tree (menus can have sub-menus) of records. Menus "
"without children map to…"
msgstr ""

#: ../../howtos/website.rst:332
msgid ""
"actions. Actions have various types: links, reports, code which Odoo "
"should execute or data display. Data display actions are called *window "
"actions*, and tell Odoo to display a given *model* according to a set of "
"views…"
msgstr ""

#: ../../howtos/website.rst:335
msgid ""
"a view has a type, a broad category to which it corresponds (a list, a "
"graph, a calendar) and an *architecture* which customises the way the "
"model is displayed inside the view."
msgstr ""

#: ../../howtos/website.rst:340
msgid "Editing in the Odoo administration"
msgstr ""

#: ../../howtos/website.rst:342
msgid ""
"By default, an Odoo model is essentially invisible to a user. To make it "
"visible it must be available through an action, which itself needs to be "
"reachable, generally through a menu."
msgstr ""

#: ../../howtos/website.rst:346
msgid "Let's create a menu for our model:"
msgstr ""

#: ../../howtos/website.rst:350
msgid ""
"then accessing http://localhost:8069/web/ in the top left should be a "
"menu :guilabel:`Academy`, which is selected by default, as it is the first "
"menu, and having opened a listing of teachers. From the listing it is "
"possible to :guilabel:`Create` new teacher records, and to switch to the "
"\"form\" by-record view."
msgstr ""

#: ../../howtos/website.rst:356
msgid ""
"If there is no definition of how to present records (a :ref:`view "
"<reference/views>`) Odoo will automatically create a basic one on-the-fly. "
"In our case it works for the \"list\" view for now (only displays the "
"teacher's name) but in the \"form\" view the HTML ``biography`` field is "
"displayed side-by-side with the ``name`` field and not given enough space. "
"Let's define a custom form view to make viewing and editing teacher "
"records a better experience:"
msgstr ""

#: ../../howtos/website.rst:367
msgid "Relations between models"
msgstr ""

#: ../../howtos/website.rst:369
msgid ""
"We have seen a pair of \"basic\" fields stored directly in the record. "
"There are :ref:`a number of basic fields <reference/orm/fields/basic>`. "
"The second broad categories of fields are :ref:`relational <reference/orm/"
"fields/relational>` and used to link records to one another (within a "
"model or across models)."
msgstr ""

#: ../../howtos/website.rst:375
msgid ""
"For demonstration, let's create a *courses* model. Each course should have "
"a ``teacher`` field, linking to a single teacher record, but each teacher "
"can teach many courses:"
msgstr ""

#: ../../howtos/website.rst:381
msgid "let's also add views so we can see and edit a course's teacher:"
msgstr ""

#: ../../howtos/website.rst:385
msgid ""
"It should also be possible to create new courses directly from a teacher's "
"page, or to see all the courses they teach, so add :class:`the inverse "
"relationship <openerp.fields.One2many>` to the *teachers* model:"
msgstr ""

#: ../../howtos/website.rst:393
msgid "Discussions and notifications"
msgstr ""

#: ../../howtos/website.rst:395
msgid ""
"Odoo provides technical models, which don't directly fulfill business "
"needs but which add capabilities to business objects without having to "
"build them by hand."
msgstr ""

#: ../../howtos/website.rst:399
msgid ""
"One of these is the *Chatter* system, part of Odoo's email and messaging "
"system, which can add notifications and discussion threads to any model. "
"The model simply has to :attr:`~openerp.models.Model._inherit` ``mail."
"thread``, and add the ``message_ids`` field to its form view to display "
"the discussion thread. Discussion threads are per-record."
msgstr ""

#: ../../howtos/website.rst:405
msgid ""
"For our academy, it makes sense to allow discussing courses to handle e.g. "
"scheduling changes or discussions between teachers and assistants:"
msgstr ""

#: ../../howtos/website.rst:410
msgid ""
"At the bottom of each course form, there is now a discussion thread and "
"the possibility for users of the system to leave messages and follow or "
"unfollow discussions linked to specific courses."
msgstr ""

#: ../../howtos/website.rst:415
msgid "Selling courses"
msgstr ""

#: ../../howtos/website.rst:417
msgid ""
"Odoo also provides business models which allow using or opting in business "
"needs more directly. For instance the ``website_sale`` module sets up an e-"
"commerce site based on the products in the Odoo system. We can easily make "
"course subscriptions sellable by making our courses specific kinds of "
"products."
msgstr ""

#: ../../howtos/website.rst:423
msgid ""
"Rather than the previous classical inheritance, this means replacing our "
"*course* model by the *product* model, and extending products in-place (to "
"add anything we need to it)."
msgstr ""

#: ../../howtos/website.rst:427
msgid ""
"First of all we need to add a dependency on ``website_sale`` so we get "
"both products (via ``sale``) and the ecommerce interface:"
msgstr ""

#: ../../howtos/website.rst:432
msgid ""
"restart Odoo, update your module, there is now a :guilabel:`Shop` section "
"in the website, listing a number of pre-filled (via demonstration data) "
"products."
msgstr ""

#: ../../howtos/website.rst:435
msgid ""
"The second step is to replace the *courses* model by ``product.template``, "
"and add a new category of product for courses:"
msgstr ""

#: ../../howtos/website.rst:440
msgid ""
"With this installed, a few courses are now available in the :guilabel:"
"`Shop`, though they may have to be looked for."
msgstr ""

#: ../../howtos/website.rst:445
msgid ""
"to extend a model in-place, it's :attr:`inherited <openerp.models.Model."
"_inherit>` without giving it a new :attr:`~openerp.models.Model._name`"
msgstr ""

#: ../../howtos/website.rst:448
msgid ""
"``product.template`` already uses the discussions system, so we can remove "
"it from our extension model"
msgstr ""

#: ../../howtos/website.rst:450
msgid ""
"we're creating our courses as *published* by default so they can be seen "
"without having to log in"
msgstr ""

#: ../../howtos/website.rst:454
msgid "Altering existing views"
msgstr ""

#: ../../howtos/website.rst:456
msgid "So far, we have briefly seen:"
msgstr ""

#: ../../howtos/website.rst:458
msgid "the creation of new models"
msgstr ""

#: ../../howtos/website.rst:459
msgid "the creation of new views"
msgstr ""

#: ../../howtos/website.rst:460
msgid "the creation of new records"
msgstr ""

#: ../../howtos/website.rst:461
msgid "the alteration of existing models"
msgstr ""

#: ../../howtos/website.rst:463
msgid ""
"We're left with the alteration of existing records and the alteration of "
"existing views. We'll do both on the :guilabel:`Shop` pages."
msgstr ""

#: ../../howtos/website.rst:466
msgid ""
"View alteration is done by creating *extension* views, which are applied "
"on top of the original view and alter it. These alteration views can be "
"added or removed without modifying the original, making it easier to try "
"things out and roll changes back."
msgstr ""

#: ../../howtos/website.rst:471
msgid ""
"Since our courses are free, there is no reason to display their price on "
"the shop page, so we're going to alter the view and hide the price if it's "
"0. The first task is finding out which view displays the price, this can "
"be done via :menuselection:`Customize --> HTML Editor` which lets us read "
"the various templates involved in rendering a page. Going through a few of "
"them, \"Product item\" looks a likely culprit."
msgstr ""

#: ../../howtos/website.rst:478
msgid "Altering view architectures is done in 3 steps:"
msgstr ""

#: ../../howtos/website.rst:480
msgid "Create a new view"
msgstr ""

#: ../../howtos/website.rst:481
msgid ""
"Extend the view to modify by setting the new view's ``inherit_id`` to the "
"modified view's external id"
msgstr ""

#: ../../howtos/website.rst:483
msgid ""
"In the architecture, use the ``xpath`` tag to select and alter elements "
"from the modified view"
msgstr ""

#: ../../howtos/website.rst:488
msgid ""
"The second thing we will change is making the product categories sidebar "
"visible by default: :menuselection:`Customize --> Product Categories` lets "
"you toggle a tree of product categories (used to filter the main display) "
"on and off."
msgstr ""

#: ../../howtos/website.rst:493
msgid ""
"This is done via the ``customize_show`` and ``active`` fields of extension "
"templates: an extension template (such as the one we've just created) can "
"be *customize_show=True*. This choice will display the view in the :"
"guilabel:`Customize` menu with a check box, allowing administrators to "
"activate or disable them (and easily customize their website pages)."
msgstr ""

#: ../../howtos/website.rst:499
msgid ""
"We simply need to modify the *Product Categories* record and set its "
"default to *active=\"True\"*:"
msgstr ""

#: ../../howtos/website.rst:504
msgid ""
"With this, the *Product Categories* sidebar will automatically be enabled "
"when the *Academy* module is installed."
msgstr ""
