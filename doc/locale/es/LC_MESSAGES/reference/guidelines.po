# SOME DESCRIPTIVE TITLE.
# Copyright (C) Odoo S.A.
# This file is distributed under the same license as the odoo package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: odoo 9.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-07-17 21:50-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../reference/guidelines.rst:7
msgid "Odoo Guidelines"
msgstr ""

#: ../../reference/guidelines.rst:9
msgid ""
"This page introduces the new Odoo Coding Guidelines. Those aim to improve"
" the quality of the code (e.g. better readability of source) and Odoo "
"Apps. Indeed, proper code eases maintenance, aids debugging, lowers "
"complexity and promotes reliability."
msgstr ""

#: ../../reference/guidelines.rst:11
msgid ""
"These guidelines should be applied to every new module, and new "
"developpment. These guidelines will be applied to old module **only** in "
"case of code refactoring (migration to new API, big refactoring, ...)."
msgstr ""

#: ../../reference/guidelines.rst:15
msgid ""
"These guidelines are written with new modules and new files in mind. When"
" modifying existing files, the original style of the file strictly "
"supersedes any other style guidelines. In other words, never modify "
"existing files in order to apply these guidelines, to avoid disrupting "
"the revision history of each line. For more details, see our `pull "
"request guide <https://odoo.com/submit-pr>`_."
msgstr ""

#: ../../reference/guidelines.rst:22
msgid "Module structure"
msgstr ""

#: ../../reference/guidelines.rst:25
msgid "Directories"
msgstr ""

#: ../../reference/guidelines.rst:26
msgid ""
"A module is organised in important directories. Those contain the "
"business logic; having a look at them should make understand the purpose "
"of the module."
msgstr ""

#: ../../reference/guidelines.rst:28
msgid "*data/* : demo and data xml"
msgstr ""

#: ../../reference/guidelines.rst:29
msgid "*models/* : models definition"
msgstr ""

#: ../../reference/guidelines.rst:30
msgid "*controllers/* : contains controllers (HTTP routes)."
msgstr ""

#: ../../reference/guidelines.rst:31
msgid "*views/* : contains the views and templates"
msgstr ""

#: ../../reference/guidelines.rst:32
msgid ""
"*static/* : contains the web assets, separated into *css/, js/, img/, "
"lib/, ...*"
msgstr ""

#: ../../reference/guidelines.rst:34
msgid "Other optional directories compose the module."
msgstr ""

#: ../../reference/guidelines.rst:36
msgid ""
"*wizard/* : regroups the transient models (formerly *osv_memory*) and "
"their views."
msgstr ""

#: ../../reference/guidelines.rst:37
msgid ""
"*report/* : contains the reports (RML report **[deprecated]**, models "
"based on SQL views (for reporting) and other complex reports). Python "
"objects and XML views are included in this directory."
msgstr ""

#: ../../reference/guidelines.rst:38
msgid "*tests/* : contains the Python/YML tests"
msgstr ""

#: ../../reference/guidelines.rst:42
msgid "File naming"
msgstr ""

#: ../../reference/guidelines.rst:43
msgid ""
"For *views* declarations, split backend views from (frontend) templates "
"in 2 differents files."
msgstr ""

#: ../../reference/guidelines.rst:46
msgid ""
"For *models*, split the business logic by sets of models, in each set "
"select a main model, this model gives its name to the set. If there is "
"only one model, its name is the same as the module name. For each set "
"named <main_model> the following files may be created:"
msgstr ""

#: ../../reference/guidelines.rst:51
msgid ":file:`models/{<main_model>}.py`"
msgstr ""

#: ../../reference/guidelines.rst:52
msgid ":file:`models/{<inherited_main_model>}.py`"
msgstr ""

#: ../../reference/guidelines.rst:53
msgid ":file:`views/{<main_model>}_templates.xml`"
msgstr ""

#: ../../reference/guidelines.rst:54
msgid ":file:`views/{<main_model>}_views.xml`"
msgstr ""

#: ../../reference/guidelines.rst:56
msgid ""
"For instance, *sale* module introduces ``sale_order`` and "
"``sale_order_line`` where ``sale_order`` is dominant. So the "
"``<main_model>`` files will be named :file:`models/sale_order.py` and "
":file:`views/sale_order_views.py`."
msgstr ""

#: ../../reference/guidelines.rst:61
msgid ""
"For *data*, split them by purpose : demo or data. The filename will be "
"the main_model name, suffixed by *_demo.xml* or *_data.xml*."
msgstr ""

#: ../../reference/guidelines.rst:64
msgid ""
"For *controllers*, the only file should be named *main.py*. Otherwise, if"
" you need to inherit an existing controller from another module, its name"
" will be *<module_name>.py*. Unlike *models*, each controller class "
"should be contained in a separated file."
msgstr ""

#: ../../reference/guidelines.rst:66
msgid ""
"For *static files*, since the resources can be used in different contexts"
" (frontend, backend, both), they will be included in only one bundle. So,"
" CSS/Less, JavaScript and XML files should be suffixed with the name of "
"the bundle type. i.e.: *im_chat_common.css*, *im_chat_common.js* for "
"'assets_common' bundle, and *im_chat_backend.css*, *im_chat_backend.js* "
"for 'assets_backend' bundle. If the module owns only one file, the "
"convention will be *<module_name>.ext* (i.e.: *project.js*). Don't link "
"data (image, libraries) outside Odoo: do not use an URL to an image but "
"copy it in our codebase instead."
msgstr ""

#: ../../reference/guidelines.rst:71
msgid ""
"Regarding *data*, split them by purpose: data or demo. The filename will "
"be the *main_model* name, suffixed by *_data.xml* or *_demo.xml*."
msgstr ""

#: ../../reference/guidelines.rst:74
msgid "Regarding *wizards*, naming convention is :"
msgstr ""

#: ../../reference/guidelines.rst:76
msgid ":file:`{<main_transient>}.py`"
msgstr ""

#: ../../reference/guidelines.rst:77
msgid ":file:`{<main_transient>}_views.xml`"
msgstr ""

#: ../../reference/guidelines.rst:79
msgid ""
"Where *<main_transient>* is the name of the dominant transient model, "
"just like for *models*. <main_transient>.py can contains the models "
"'model.action' and 'model.action.line'."
msgstr ""

#: ../../reference/guidelines.rst:81
msgid "For *statistics reports*, their names should look like :"
msgstr ""

#: ../../reference/guidelines.rst:83
msgid ":file:`{<report_name_A>}_report.py`"
msgstr ""

#: ../../reference/guidelines.rst:84
msgid ":file:`{<report_name_A>}_report_views.py` (often pivot and graph views)"
msgstr ""

#: ../../reference/guidelines.rst:86
msgid "For *printable reports*, you should have :"
msgstr ""

#: ../../reference/guidelines.rst:88
msgid ""
":file:`{<print_report_name>}_reports.py` (report actions, paperformat "
"definition, ...)"
msgstr ""

#: ../../reference/guidelines.rst:89
msgid ":file:`{<print_report_name>}_templates.xml` (xml report templates)"
msgstr ""

#: ../../reference/guidelines.rst:92
msgid "The complete tree should look like"
msgstr ""

#: ../../reference/guidelines.rst:145
msgid ""
"File names should only contain ``[a-z0-9_]`` (lowercase alphanumerics and"
" ``_``)"
msgstr ""

#: ../../reference/guidelines.rst:148
msgid "Use correct file permissions : folder 755 and file 644."
msgstr ""

#: ../../reference/guidelines.rst:151
msgid "XML files"
msgstr ""

#: ../../reference/guidelines.rst:154
msgid "Format"
msgstr ""

#: ../../reference/guidelines.rst:155
msgid ""
"To declare a record in XML, the **record** notation (using *<record>*) is"
" recommended:"
msgstr ""

#: ../../reference/guidelines.rst:157
msgid "Place ``id`` attribute before ``model``"
msgstr ""

#: ../../reference/guidelines.rst:158
msgid ""
"For field declaration, ``name`` attribute is first. Then place the "
"*value* either in the ``field`` tag, either in the ``eval`` attribute, "
"and finally other attributes (widget, options, ...) ordered by "
"importance."
msgstr ""

#: ../../reference/guidelines.rst:163
msgid ""
"Try to group the record by model. In case of dependencies between "
"action/menu/views, this convention may not be applicable."
msgstr ""

#: ../../reference/guidelines.rst:165
msgid "Use naming convention defined at the next point"
msgstr ""

#: ../../reference/guidelines.rst:166
msgid ""
"The tag *<data>* is only used to set not-updatable data with "
"``noupdate=1``. If there is only not-updatable data in the file, the "
"``noupdate=1`` can be set on the ``<odoo>`` tag and do not set a "
"``<data>`` tag."
msgstr ""

#: ../../reference/guidelines.rst:184
msgid "Odoo supports custom tags acting as syntactic sugar:"
msgstr ""

#: ../../reference/guidelines.rst:186
msgid "menuitem: use it as a shortcut to declare a ``ir.ui.menu``"
msgstr ""

#: ../../reference/guidelines.rst:187
msgid ""
"template: use it to declare a QWeb View requiring only the ``arch`` "
"section of the view."
msgstr ""

#: ../../reference/guidelines.rst:188
msgid "report: use to declare a :ref:`report action <reference/actions/report>`"
msgstr ""

#: ../../reference/guidelines.rst:189
msgid "act_window: use it if the record notation can't do what you want"
msgstr ""

#: ../../reference/guidelines.rst:191
msgid "The 4 first tags are prefered over the *record* notation."
msgstr ""

#: ../../reference/guidelines.rst:195
msgid "Naming xml_id"
msgstr ""

#: ../../reference/guidelines.rst:198
msgid "Security, View and Action"
msgstr ""

#: ../../reference/guidelines.rst:200
msgid "Use the following pattern :"
msgstr ""

#: ../../reference/guidelines.rst:202
msgid "For a menu: :samp:`{<model_name>}_menu`"
msgstr ""

#: ../../reference/guidelines.rst:203
msgid ""
"For a view: :samp:`{<model_name>}_view_{<view_type>}`, where *view_type* "
"is ``kanban``, ``form``, ``tree``, ``search``, ..."
msgstr ""

#: ../../reference/guidelines.rst:205
msgid ""
"For an action: the main action respects :samp:`{<model_name>}_action`. "
"Others are suffixed with :samp:`_{<detail>}`, where *detail* is a "
"lowercase string briefly explaining the action. This is used only if "
"multiple actions are declared for the model."
msgstr ""

#: ../../reference/guidelines.rst:210
msgid ""
"For a group: :samp:`{<model_name>}_group_{<group_name>}` where "
"*group_name* is the name of the group, generally 'user', 'manager', ..."
msgstr ""

#: ../../reference/guidelines.rst:212
msgid ""
"For a rule: :samp:`{<model_name>}_rule_{<concerned_group>}` where "
"*concerned_group* is the short name of the concerned group ('user' for "
"the 'model_name_group_user', 'public' for public user, 'company' for "
"multi-company rules, ...)."
msgstr ""

#: ../../reference/guidelines.rst:216
msgid ""
"For a group : :samp:`{<model_name>}_group_{<group_name>}` where "
"*group_name* is the name of the group, generally 'user', 'manager', ..."
msgstr ""

#: ../../reference/guidelines.rst:266
msgid ""
"View names use dot notation ``my.model.view_type`` or "
"``my.model.view_type.inherit`` instead of *\"This is the form view of My "
"Model\"*."
msgstr ""

#: ../../reference/guidelines.rst:272
msgid "Inherited XML"
msgstr ""

#: ../../reference/guidelines.rst:274
msgid ""
"The naming pattern of inherited view is "
":samp:`{<base_view>}_inherit_{<current_module_name>}`. A module may only "
"extend a view once.  Suffix the orginal name with "
":samp:`_inherit_{<current_module_name>}` where *current_module_name* is "
"the technical name of the module extending the view."
msgstr ""

#: ../../reference/guidelines.rst:289
msgid "Python"
msgstr ""

#: ../../reference/guidelines.rst:292
msgid "PEP8 options"
msgstr ""

#: ../../reference/guidelines.rst:294
msgid ""
"Using a linter can help show syntax and semantic warnings or errors. Odoo"
" source code tries to respect Python standard, but some of them can be "
"ignored."
msgstr ""

#: ../../reference/guidelines.rst:297
msgid "E501: line too long"
msgstr ""

#: ../../reference/guidelines.rst:298
msgid "E301: expected 1 blank line, found 0"
msgstr ""

#: ../../reference/guidelines.rst:299
msgid "E302: expected 2 blank lines, found 1"
msgstr ""

#: ../../reference/guidelines.rst:300
msgid "E126: continuation line over-indented for hanging indent"
msgstr ""

#: ../../reference/guidelines.rst:301
msgid "E123: closing bracket does not match indentation of opening bracket's line"
msgstr ""

#: ../../reference/guidelines.rst:302
msgid "E127: continuation line over-indented for visual indent"
msgstr ""

#: ../../reference/guidelines.rst:303
msgid "E128: continuation line under-indented for visual indent"
msgstr ""

#: ../../reference/guidelines.rst:304
msgid "E265: block comment should start with '# '"
msgstr ""

#: ../../reference/guidelines.rst:307
msgid "Imports"
msgstr ""

#: ../../reference/guidelines.rst:308
msgid "The imports are ordered as"
msgstr ""

#: ../../reference/guidelines.rst:310
msgid "External libraries (one per line sorted and split in python stdlib)"
msgstr ""

#: ../../reference/guidelines.rst:311
msgid "Imports of ``odoo``"
msgstr ""

#: ../../reference/guidelines.rst:312
msgid "Imports from Odoo modules (rarely, and only if necessary)"
msgstr ""

#: ../../reference/guidelines.rst:314
msgid "Inside these 3 groups, the imported lines are alphabetically sorted."
msgstr ""

#: ../../reference/guidelines.rst:334
msgid "Idiomatics Python Programming"
msgstr ""

#: ../../reference/guidelines.rst:336
msgid "Each python file should have ``# -*- coding: utf-8 -*-`` as first line."
msgstr ""

#: ../../reference/guidelines.rst:337
msgid ""
"Always favor *readability* over *conciseness* or using the language "
"features or idioms."
msgstr ""

#: ../../reference/guidelines.rst:338
msgid "Don't use ``.clone()``"
msgstr ""

#: ../../reference/guidelines.rst:349
msgid "Python dictionnary : creation and update"
msgstr ""

#: ../../reference/guidelines.rst:374
msgid "Use meaningful variable/class/method names"
msgstr ""

#: ../../reference/guidelines.rst:375
msgid ""
"Useless variable : Temporary variables can make the code clearer by "
"giving names to objects, but that doesn't mean you should create "
"temporary variables all the time:"
msgstr ""

#: ../../reference/guidelines.rst:387
msgid "Multiple return points are OK, when they're simpler"
msgstr ""

#: ../../reference/guidelines.rst:407
msgid ""
"Know your builtins : You should at least have a basic understanding of "
"all the Python builtins (http://docs.python.org/library/functions.html)"
msgstr ""

#: ../../reference/guidelines.rst:415
msgid ""
"Also, ``if 'key' in my_dict`` and ``if my_dict.get('key')`` have very "
"different meaning, be sure that you're using the right one."
msgstr ""

#: ../../reference/guidelines.rst:418
msgid ""
"Learn list comprehensions : Use list comprehension, dict comprehension, "
"and basic manipulation using ``map``, ``filter``, ``sum``, ... They make "
"the code easier to read."
msgstr ""

#: ../../reference/guidelines.rst:431
msgid ""
"Collections are booleans too : In python, many objects have \"boolean-"
"ish\" value when evaluated in a boolean context (such as an if). Among "
"these are collections (lists, dicts, sets, ...) which are \"falsy\" when "
"empty and \"truthy\" when containing items:"
msgstr ""

#: ../../reference/guidelines.rst:442
msgid ""
"So, you can write ``if some_collection:`` instead of ``if "
"len(some_collection):``."
msgstr ""

#: ../../reference/guidelines.rst:445
msgid "Iterate on iterables"
msgstr ""

#: ../../reference/guidelines.rst:462
msgid "Use dict.setdefault"
msgstr ""

#: ../../reference/guidelines.rst:478
msgid ""
"As a good developper, document your code (docstring on methods, simple "
"comments for tricky part of code)"
msgstr ""

#: ../../reference/guidelines.rst:480
msgid ""
"In additions to these guidelines, you may also find the following link "
"interesting: "
"http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html (a "
"little bit outdated, but quite relevant)"
msgstr ""

#: ../../reference/guidelines.rst:485
msgid "Programming in Odoo"
msgstr ""

#: ../../reference/guidelines.rst:487
msgid ""
"Avoid to create generators and decorators: only use the ones provided by "
"the Odoo API."
msgstr ""

#: ../../reference/guidelines.rst:489
msgid ""
"As in python, use ``filtered``, ``mapped``, ``sorted``, ... methods to "
"ease code reading and performance."
msgstr ""

#: ../../reference/guidelines.rst:494
msgid "Make your method works in batch"
msgstr ""

#: ../../reference/guidelines.rst:495
msgid ""
"When adding a function, make sure it can process multiple records. "
"Typically, such method is decorated with ``api.multi`` decorator (or "
"takes a list of *id*, if written in old api). Then you will have to "
"iterate on ``self`` to treat each record."
msgstr ""

#: ../../reference/guidelines.rst:507
msgid ""
"Avoid to use ``api.one``  decorator : this will probably not do what you "
"expected, and extending a such method is not as easy than a *api.multi* "
"method, since it returns a list of result (ordered by recordset ids)."
msgstr ""

#: ../../reference/guidelines.rst:511
msgid ""
"For performance issue, when developping a 'stat button' (for instance), "
"do not perform a ``search`` or a ``search_count`` in a loop in a "
"``api.multi`` method. It is recommended to use ``read_group`` method, to "
"compute all value in only one request."
msgstr ""

#: ../../reference/guidelines.rst:527
msgid "Propagate the context"
msgstr ""

#: ../../reference/guidelines.rst:528
msgid ""
"In new API, the context is a ``frozendict`` that cannot be modified. To "
"call a method with a different context, the ``with_context`` method "
"should be used :"
msgstr ""

#: ../../reference/guidelines.rst:536
msgid ""
"Passing parameter in context can have dangerous side-effects. Since the "
"values are propagated automatically, some behavior can appears. Calling "
"``create()`` method of a model with *default_my_field* key in context "
"will set the default value of *my_field* for the concerned model. But if "
"curing this creation, other object (such as sale.order.line, on "
"sale.order creation) having a field name *my_field*, their default value "
"will be set too."
msgstr ""

#: ../../reference/guidelines.rst:543
msgid ""
"If you need to create a key context influencing the behavior of some "
"object, choice a good name, and eventually prefix it by the name of the "
"module to isolate its impact. A good example are the keys of ``mail`` "
"module : *mail_create_nosubscribe*, *mail_notrack*, "
"*mail_notify_user_signature*, ..."
msgstr ""

#: ../../reference/guidelines.rst:550
msgid "Do not bypass the ORM"
msgstr ""

#: ../../reference/guidelines.rst:551
msgid ""
"You should never use the database cursor directly when the ORM can do the"
" same thing! By doing so you are bypassing all the ORM features, possibly"
" the transactions, access rights and so on."
msgstr ""

#: ../../reference/guidelines.rst:555
msgid ""
"And chances are that you are also making the code harder to read and "
"probably less secure."
msgstr ""

#: ../../reference/guidelines.rst:574
msgid "No SQL injections, please !"
msgstr ""

#: ../../reference/guidelines.rst:575
msgid ""
"Care must be taken not to introduce SQL injections vulnerabilities when "
"using manual SQL queries. The vulnerability is present when user input is"
" either incorrectly filtered or badly quoted, allowing an attacker to "
"introduce undesirable clauses to a SQL query (such as circumventing "
"filters or executing UPDATE or DELETE commands)."
msgstr ""

#: ../../reference/guidelines.rst:581
msgid ""
"The best way to be safe is to never, NEVER use Python string "
"concatenation (+) or string parameters interpolation (%) to pass "
"variables to a SQL query string."
msgstr ""

#: ../../reference/guidelines.rst:584
msgid ""
"The second reason, which is almost as important, is that it is the job of"
" the database abstraction layer (psycopg2) to decide how to format query "
"parameters, not your job! For example psycopg2 knows that when you pass a"
" list of values it needs to format them as a comma-separated list, "
"enclosed in parentheses !"
msgstr ""

#: ../../reference/guidelines.rst:604
msgid ""
"This is very important, so please be careful also when refactoring, and "
"most importantly do not copy these patterns!"
msgstr ""

#: ../../reference/guidelines.rst:607
msgid ""
"Here is a memorable example to help you remember what the issue is about "
"(but do not copy the code there). Before continuing, please be sure to "
"read the online documentation of pyscopg2 to learn of to use it properly:"
msgstr ""

#: ../../reference/guidelines.rst:611
msgid ""
"The problem with query parameters "
"(http://initd.org/psycopg/docs/usage.html#the-problem-with-the-query-"
"parameters)"
msgstr ""

#: ../../reference/guidelines.rst:612
msgid ""
"How to pass parameters with psycopg2 "
"(http://initd.org/psycopg/docs/usage.html#passing-parameters-to-sql-"
"queries)"
msgstr ""

#: ../../reference/guidelines.rst:613
msgid ""
"Advanced parameter types (http://initd.org/psycopg/docs/usage.html"
"#adaptation-of-python-values-to-sql-types)"
msgstr ""

#: ../../reference/guidelines.rst:617
msgid "Keep your methods short/simple when possible"
msgstr ""

#: ../../reference/guidelines.rst:618
msgid ""
"Functions and methods should not contain too much logic: having a lot of "
"small and simple methods is more advisable than having few large and "
"complex methods. A good rule of thumb is to split a method as soon as: - "
"it has more than one responsibility (see "
"http://en.wikipedia.org/wiki/Single_responsibility_principle) - it is too"
" big to fit on one screen."
msgstr ""

#: ../../reference/guidelines.rst:624
msgid ""
"Also, name your functions accordingly: small and properly named functions"
" are the starting point of readable/maintainable code and tighter "
"documentation."
msgstr ""

#: ../../reference/guidelines.rst:626
msgid ""
"This recommendation is also relevant for classes, files, modules and "
"packages. (See also http://en.wikipedia.org/wiki/Cyclomatic_complexity)"
msgstr ""

#: ../../reference/guidelines.rst:630
msgid "Never commit the transaction"
msgstr ""

#: ../../reference/guidelines.rst:631
msgid ""
"The Odoo framework is in charge of providing the transactional context "
"for all RPC calls. The principle is that a new database cursor is opened "
"at the beginning of each RPC call, and committed when the call has "
"returned, just before transmitting the answer to the RPC client, "
"approximately like this:"
msgstr ""

#: ../../reference/guidelines.rst:652
msgid ""
"If any error occurs during the execution of the RPC call, the transaction"
" is rolled back atomically, preserving the state of the system."
msgstr ""

#: ../../reference/guidelines.rst:655
msgid ""
"Similarly, the system also provides a dedicated transaction during the "
"execution of tests suites, so it can be rolled back or not depending on "
"the server startup options."
msgstr ""

#: ../../reference/guidelines.rst:659
msgid ""
"The consequence is that if you manually call ``cr.commit()`` anywhere "
"there is a very high chance that you will break the system in various "
"ways, because you will cause partial commits, and thus partial and "
"unclean rollbacks, causing among others:"
msgstr ""

#: ../../reference/guidelines.rst:664
msgid "inconsistent business data, usually data loss"
msgstr ""

#: ../../reference/guidelines.rst:665
msgid "workflow desynchronization, documents stuck permanently"
msgstr ""

#: ../../reference/guidelines.rst:666
msgid ""
"tests that can't be rolled back cleanly, and will start polluting the "
"database, and triggering error (this is true even if no error occurs "
"during the transaction)"
msgstr ""

#: ../../reference/guidelines.rst:677
msgid "Here is the very simple rule:"
msgstr ""

#: ../../reference/guidelines.rst:671
msgid ""
"You should **NEVER** call ``cr.commit()`` yourself, **UNLESS** you have "
"created your own database cursor explicitly! And the situations where you"
" need to do that are exceptional!"
msgstr ""

#: ../../reference/guidelines.rst:675
msgid ""
"And by the way if you did create your own cursor, then you need to handle"
" error cases and proper rollback, as well as properly close the cursor "
"when you're done with it."
msgstr ""

#: ../../reference/guidelines.rst:679
msgid ""
"And contrary to popular belief, you do not even need to call "
"``cr.commit()`` in the following situations: - in the ``_auto_init()`` "
"method of an *models.Model* object: this is taken care of by the addons "
"initialization method, or by the ORM transaction when creating custom "
"models - in reports: the ``commit()`` is handled by the framework too, so"
" you can update the database even from within a report - within "
"*models.Transient* methods: these methods are called exactly like regular"
" *models.Model* ones, within a transaction and with the corresponding "
"``cr.commit()/rollback()`` at the end - etc. (see general rule above if "
"you have in doubt!)"
msgstr ""

#: ../../reference/guidelines.rst:691
msgid ""
"All ``cr.commit()`` calls outside of the server framework from now on "
"must have an **explicit comment** explaining why they are absolutely "
"necessary, why they are indeed correct, and why they do not break the "
"transactions. Otherwise they can and will be removed !"
msgstr ""

#: ../../reference/guidelines.rst:698
msgid "Use translation method correctly"
msgstr ""

#: ../../reference/guidelines.rst:700
msgid ""
"Odoo uses a GetText-like method named \"underscore\" ``_( )`` to indicate"
" that a static string used in the code needs to be translated at runtime "
"using the language of the context. This pseudo-method is accessed within "
"your code by importing as follows:"
msgstr ""

#: ../../reference/guidelines.rst:709
msgid ""
"A few very important rules must be followed when using it, in order for "
"it to work and to avoid filling the translations with useless junk."
msgstr ""

#: ../../reference/guidelines.rst:712
msgid ""
"Basically, this method should only be used for static strings written "
"manually in the code, it will not work to translate field values, such as"
" Product names, etc. This must be done instead using the translate flag "
"on the corresponding field."
msgstr ""

#: ../../reference/guidelines.rst:717
msgid ""
"The rule is very simple: calls to the underscore method should always be "
"in the form ``_('literal string')`` and nothing else:"
msgstr ""

#: ../../reference/guidelines.rst:761
#, python-format
msgid ""
"Also, keep in mind that translators will have to work with the literal "
"values that are passed to the underscore function, so please try to make "
"them easy to understand and keep spurious characters and formatting to a "
"minimum. Translators must be aware that formatting patterns such as %s or"
" %d, newlines, etc. need to be preserved, but it's important to use these"
" in a sensible and obvious manner:"
msgstr ""

#: ../../reference/guidelines.rst:776
msgid ""
"In general in Odoo, when manipulating strings, prefer ``%`` over "
"``.format()`` (when only one variable to replace in a string), and prefer"
" ``%(varname)`` instead of position (when multiple variables have to be "
"replaced). This makes the translation easier for the community "
"translators."
msgstr ""

#: ../../reference/guidelines.rst:783
msgid "Symbols and Conventions"
msgstr ""

#: ../../reference/guidelines.rst:793
msgid "Model name (using the dot notation, prefix by the module name) :"
msgstr ""

#: ../../reference/guidelines.rst:786
msgid ""
"When defining an Odoo Model : use singular form of the name "
"(*res.partner* and *sale.order* instead of *res.partnerS* and "
"*saleS.orderS*)"
msgstr ""

#: ../../reference/guidelines.rst:788
msgid ""
"When defining an Odoo Transient (wizard) : use "
"``<related_base_model>.<action>`` where *related_base_model* is the base "
"model (defined in *models/*) related to the transient, and *action* is "
"the short name of what the transient do. For instance : "
"``account.invoice.make``, ``project.task.delegate.batch``, ..."
msgstr ""

#: ../../reference/guidelines.rst:792
msgid ""
"When defining *report* model (SQL views e.i.) : use "
"``<related_base_model>.report.<action>``, based on the Transient "
"convention."
msgstr ""

#: ../../reference/guidelines.rst:795
msgid ""
"Odoo Python Class : use camelcase for code in api v8 (Object-oriented "
"style), underscore lowercase notation for old api (SQL style)."
msgstr ""

#: ../../reference/guidelines.rst:812
msgid "Variable name :"
msgstr ""

#: ../../reference/guidelines.rst:808
msgid "use camelcase for model variable"
msgstr ""

#: ../../reference/guidelines.rst:809
msgid "use underscore lowercase notation for common variable."
msgstr ""

#: ../../reference/guidelines.rst:810
msgid ""
"since new API works with record or recordset instead of id list, don't "
"suffix variable name with *_id* or *_ids* if they not contain id or list "
"of id."
msgstr ""

#: ../../reference/guidelines.rst:820
msgid ""
"``One2Many`` and ``Many2Many`` fields should always have *_ids* as suffix"
" (example: sale_order_line_ids)"
msgstr ""

#: ../../reference/guidelines.rst:821
msgid ""
"``Many2One`` fields should have *_id* as suffix (example : partner_id, "
"user_id, ...)"
msgstr ""

#: ../../reference/guidelines.rst:830
msgid "Method conventions"
msgstr ""

#: ../../reference/guidelines.rst:823
msgid "Compute Field : the compute method pattern is *_compute_<field_name>*"
msgstr ""

#: ../../reference/guidelines.rst:824
msgid "Search method : the search method pattern is *_search_<field_name>*"
msgstr ""

#: ../../reference/guidelines.rst:825
msgid "Default method : the default method pattern is *_default_<field_name>*"
msgstr ""

#: ../../reference/guidelines.rst:826
msgid "Onchange method : the onchange method pattern is *_onchange_<field_name>*"
msgstr ""

#: ../../reference/guidelines.rst:827
msgid ""
"Constraint method : the constraint method pattern is "
"*_check_<constraint_name>*"
msgstr ""

#: ../../reference/guidelines.rst:828
msgid ""
"Action method : an object action method is prefix with *action_*. Its "
"decorator is ``@api.multi``, but since it use only one record, add "
"``self.ensure_one()`` at the beginning of the method."
msgstr ""

#: ../../reference/guidelines.rst:840
msgid "In a Model attribute order should be"
msgstr ""

#: ../../reference/guidelines.rst:833
msgid "Private attributes (``_name``, ``_description``, ``_inherit``, ...)"
msgstr ""

#: ../../reference/guidelines.rst:834
msgid "Default method and ``_default_get``"
msgstr ""

#: ../../reference/guidelines.rst:835
msgid "Field declarations"
msgstr ""

#: ../../reference/guidelines.rst:836
msgid "Compute and search methods in the same order as field declaration"
msgstr ""

#: ../../reference/guidelines.rst:837
msgid ""
"Constrains methods (``@api.constrains``) and onchange methods "
"(``@api.onchange``)"
msgstr ""

#: ../../reference/guidelines.rst:838
msgid "CRUD methods (ORM overrides)"
msgstr ""

#: ../../reference/guidelines.rst:839
msgid "Action methods"
msgstr ""

#: ../../reference/guidelines.rst:840
msgid "And finally, other business methods."
msgstr ""

#: ../../reference/guidelines.rst:892
msgid "Javascript and CSS"
msgstr ""

#: ../../reference/guidelines.rst:893
msgid "**For javascript :**"
msgstr ""

#: ../../reference/guidelines.rst:895
msgid "``use strict;`` is recommended for all javascript files"
msgstr ""

#: ../../reference/guidelines.rst:896
msgid "Use a linter (jshint, ...)"
msgstr ""

#: ../../reference/guidelines.rst:897
msgid "Never add minified Javascript Libraries"
msgstr ""

#: ../../reference/guidelines.rst:898
msgid "Use camelcase for class declaration"
msgstr ""

#: ../../reference/guidelines.rst:899
msgid ""
"Unless your code is supposed to run on every page, target specific pages "
"using the ``if_dom_contains`` function of website module. Target an "
"element which is specific to the pages your code needs to run on using "
"JQuery."
msgstr ""

#: ../../reference/guidelines.rst:911
msgid "**For CSS :**"
msgstr ""

#: ../../reference/guidelines.rst:913
msgid ""
"Prefix all your classes with *o_<module_name>* where *module_name* is the"
" technical name of the module ('sale', 'im_chat', ...) or the main route "
"reserved by the module (for website module mainly, i.e. : 'o_forum' for "
"*website_forum* module). The only exception for this rule is the "
"webclient: it simply uses *o_* prefix."
msgstr ""

#: ../../reference/guidelines.rst:918
msgid "Avoid using id"
msgstr ""

#: ../../reference/guidelines.rst:919
msgid "Use Bootstrap native classes"
msgstr ""

#: ../../reference/guidelines.rst:920
msgid "Use underscore lowercase notation to name class"
msgstr ""

#: ../../reference/guidelines.rst:923
msgid "Git"
msgstr ""

#: ../../reference/guidelines.rst:926
msgid "Commit message"
msgstr ""

#: ../../reference/guidelines.rst:928
msgid "Prefix your commit with"
msgstr ""

#: ../../reference/guidelines.rst:930
msgid "**[IMP]** for improvements"
msgstr ""

#: ../../reference/guidelines.rst:931
msgid "**[FIX]** for bug fixes"
msgstr ""

#: ../../reference/guidelines.rst:932
msgid "**[REF]** for refactoring"
msgstr ""

#: ../../reference/guidelines.rst:933
msgid "**[ADD]** for adding new resources"
msgstr ""

#: ../../reference/guidelines.rst:934
msgid "**[REM]** for removing of resources"
msgstr ""

#: ../../reference/guidelines.rst:935
msgid ""
"**[MOV]** for moving files (Do not change content of moved file, "
"otherwise Git will loose track, and the history will be lost !), or "
"simply moving code from a file to another one."
msgstr ""

#: ../../reference/guidelines.rst:938
msgid "**[MERGE]** for merge commits (only for forward/back-port)"
msgstr ""

#: ../../reference/guidelines.rst:939
msgid "**[CLA]** for signing the Odoo Individual Contributor License"
msgstr ""

#: ../../reference/guidelines.rst:941
msgid ""
"Then, in the message itself, specify the part of the code impacted by "
"your changes (module name, lib, transversal object, ...) and a "
"description of the changes."
msgstr ""

#: ../../reference/guidelines.rst:945
msgid ""
"Always include a meaningful commit message: it should be self explanatory"
" (long enough) including the name of the module that has been changed and"
" the reason behind the change. Do not use single words like \"bugfix\" or"
" \"improvements\"."
msgstr ""

#: ../../reference/guidelines.rst:949
msgid ""
"Avoid commits which simultaneously impact multiple modules. Try to split "
"into different commits where impacted modules are different (It will be "
"helpful if we need to revert a module separately)."
msgstr ""

#: ../../reference/guidelines.rst:970
msgid ""
"Use the long description to explain the *why* not the *what*, the *what* "
"can be seen in the diff"
msgstr ""

#~ msgid ""
#~ "This page introduce the new Odoo "
#~ "Coding Guidelines. These guidelines aim "
#~ "to improve the quality of the code"
#~ " (better readability of source, ...) "
#~ "and  Odoo Apps. Indeed, proper code "
#~ "ought ease maintenance, aid debugging, "
#~ "lower complexity and promote reliability."
#~ msgstr ""

#~ msgid "A module is organised in a few directory :"
#~ msgstr ""

#~ msgid "*controllers/* : contains controllers (http routes)."
#~ msgstr ""

#~ msgid "For *controller*, the only file should be named *main.py*."
#~ msgstr ""

#~ msgid ""
#~ "For *static files*, the name pattern "
#~ "is *<module_name>.ext* (i.e. : "
#~ "static/js/im_chat.js, static/css/im_chat.css, "
#~ "static/xml/im_chat.xml, ...). Don't link data"
#~ " (image, libraries) outside Odoo : "
#~ "don't use an url to an image "
#~ "but copy it in our codebase "
#~ "instead."
#~ msgstr ""

#~ msgid "When declaring a record in XML,"
#~ msgstr ""

#~ msgid ""
#~ "Try to group the record by model."
#~ " In case of dependencies between "
#~ "action/menu/views, the convention may not "
#~ "be applicable."
#~ msgstr ""

#~ msgid "Imports of ``openerp``"
#~ msgstr ""

#~ msgid "Idioms"
#~ msgstr ""

#~ msgid ""
#~ "Prefer ``%`` over ``.format()``, prefer "
#~ "``%(varname)`` instead of position (This "
#~ "is better for translation)"
#~ msgstr ""

#~ msgid "Try to avoid generators and decorators"
#~ msgstr ""

#~ msgid ""
#~ "Always favor *Readability* over *conciseness*"
#~ " or using the language features or"
#~ " idioms."
#~ msgstr ""

#~ msgid ""
#~ "Use list comprehension, dict comprehension,"
#~ " and basic manipulation using ``map``, "
#~ "``filter``, ``sum``, ... They make the"
#~ " code easier to read."
#~ msgstr ""

#~ msgid ""
#~ "The same applies for recordset methods"
#~ " : use ``filtered``, ``mapped``, "
#~ "``sorted``, ..."
#~ msgstr ""

#~ msgid "Each python file should have ``# -*- coding: utf-8 -*-`` as first line"
#~ msgstr ""

#~ msgid ""
#~ "Use the ``UserError`` defined in "
#~ "``openerp.exceptions`` instead of overriding "
#~ "``Warning``, or find a more appropriate"
#~ " exception in *exceptions.py*"
#~ msgstr ""

#~ msgid ""
#~ "Document your code (docstring on "
#~ "methods, simple comments for the tricky"
#~ " part of the code)"
#~ msgstr ""

#~ msgid "Symbols"
#~ msgstr ""

#~ msgid ""
#~ "Odoo Python Class : use camelcase "
#~ "for code in api v8, underscore "
#~ "lowercase notation for old api."
#~ msgstr ""

#~ msgid ""
#~ "Prefix all your class with "
#~ "*o_<module_name>* where *module_name* is the"
#~ " technical name of the module "
#~ "('sale', 'im_chat', ...) or the main "
#~ "route reserved by the module (for "
#~ "website module mainly, i.e. : 'o_forum'"
#~ " for website_forum module). The only "
#~ "exception for this rule is the "
#~ "webclient : it simply use *o_* "
#~ "prefix."
#~ msgstr ""

#~ msgid "Use bootstrap native class"
#~ msgstr ""

# d94c4e7e7b864910bb72b359c98fcb06
#~ msgid ""
#~ "The tag *<data>* is only used to"
#~ " set not-updatable data with "
#~ "``noupdate=1``"
#~ msgstr ""

# fe018a0d768d4435881460e3946c0a0e
#~ msgid "workflow: the <workflow> tag sends a signal to an existing workflow."
#~ msgstr ""

