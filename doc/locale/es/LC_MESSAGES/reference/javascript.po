# SOME DESCRIPTIVE TITLE.
# Copyright (C) Odoo S.A.
# This file is distributed under the same license as the odoo package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: odoo 9.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-02-22 23:10-0600\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.0\n"

#: ../../reference/javascript.rst:9
msgid "Javascript"
msgstr ""

#: ../../reference/javascript.rst:12
msgid "Widgets"
msgstr ""

#: ../../reference/javascript.rst:16
msgid ""
"Exported in ``web.Widget``, the base class for all visual components. It "
"corresponds to an MVC view, and provides a number of service to simplify "
"handling of a section of a page:"
msgstr ""

#: ../../reference/javascript.rst:20
msgid "Handles parent/child relationships between widgets"
msgstr ""

#: ../../reference/javascript.rst:21
msgid ""
"Provides extensive lifecycle management with safety features (e.g. "
"automatically destroying children widgets during the destruction of a "
"parent)"
msgstr ""

#: ../../reference/javascript.rst:24
msgid "Automatic rendering with :ref:`qweb <reference/qweb>`"
msgstr ""

#: ../../reference/javascript.rst:25
msgid "Backbone-compatible shortcuts"
msgstr ""

#: ../../reference/javascript.rst:28
msgid "DOM Root"
msgstr ""

#: ../../reference/javascript.rst:30
msgid ""
"A :class:`~Widget` is responsible for a section of the page materialized "
"by the DOM root of the widget."
msgstr ""

#: ../../reference/javascript.rst:33
msgid "A widget's DOM root is available via two attributes:"
msgstr ""

#: ../../reference/javascript.rst:37
msgid "raw DOM element set as root to the widget"
msgstr ""

#: ../../reference/javascript.rst:41
msgid "jQuery wrapper around :attr:`~Widget.el`"
msgstr ""

#: ../../reference/javascript.rst:43
msgid "There are two main ways to define and generate this DOM root:"
msgstr ""

#: ../../reference/javascript.rst:47
msgid ""
"Should be set to the name of a :ref:`QWeb template <reference/qweb>`. If "
"set, the template will be rendered after the widget has been initialized "
"but before it has been started. The root element generated by the "
"template will be set as the DOM root of the widget."
msgstr ""

#: ../../reference/javascript.rst:54
msgid ""
"Used if the widget has no template defined. Defaults to ``div``, will be "
"used as the tag name to create the DOM element to set as the widget's DOM"
" root. It is possible to further customize this generated DOM root with "
"the following attributes:"
msgstr ""

#: ../../reference/javascript.rst:61
msgid "Used to generate an ``id`` attribute on the generated DOM root."
msgstr ""

#: ../../reference/javascript.rst:66
msgid "Used to generate a ``class`` attribute on the generated DOM root."
msgstr ""

#: ../../reference/javascript.rst:70
msgid ""
"Mapping (object literal) of attribute names to attribute values. Each of "
"these k:v pairs will be set as a DOM attribute on the generated DOM root."
msgstr ""

#: ../../reference/javascript.rst:74
msgid "None of these is used in case a template is specified on the widget."
msgstr ""

#: ../../reference/javascript.rst:76
msgid "The DOM root can also be defined programmatically by overridding"
msgstr ""

#: ../../reference/javascript.rst:80
msgid ""
"Renders the widget's DOM root and sets it. The default implementation "
"will render a set template or generate an element as described above, and"
" will call :func:`~Widget.setElement` on the result."
msgstr ""

#: ../../reference/javascript.rst:85
msgid ""
"Any override to :func:`~Widget.renderElement` which does not call its "
"``_super`` **must** call :func:`~Widget.setElement` with whatever it "
"generated or the widget's behavior is undefined."
msgstr ""

#: ../../reference/javascript.rst:92
msgid ""
"The default :func:`~Widget.renderElement` can be called repeatedly, it "
"will *replace* the previous DOM root (using ``replaceWith``). However, "
"this requires that the widget correctly sets and unsets its events (and "
"children widgets). Generally, :func:`~Widget.renderElement` should not be"
" called repeatedly unless the widget advertizes this feature."
msgstr ""

#: ../../reference/javascript.rst:100
msgid "Using a widget"
msgstr ""

#: ../../reference/javascript.rst:102
msgid "A widget's lifecycle has 3 main phases:"
msgstr ""

#: ../../reference/javascript.rst:104
msgid "creation and initialization of the widget instance"
msgstr ""

#: ../../reference/javascript.rst:108
msgid ""
"initialization method of widgets, synchronous, can be overridden to take "
"more parameters from the widget's creator/parent"
msgstr ""

#: ../../reference/javascript.rst:111
msgid ""
"the new widget's parent, used to handle automatic destruction and event "
"propagation. Can be ``null`` for the widget to have no parent."
msgstr ""

#: ../../reference/javascript.rst:116
msgid "DOM injection and startup, this is done by calling one of:"
msgstr ""

#: ../../reference/javascript.rst:120
msgid ""
"Renders the widget and inserts it as the last child of the target, uses "
"`.appendTo()`_"
msgstr ""

#: ../../reference/javascript.rst:125
msgid ""
"Renders the widget and inserts it as the first child of the target, uses "
"`.prependTo()`_"
msgstr ""

#: ../../reference/javascript.rst:130
msgid ""
"Renders the widget and inserts it as the preceding sibling of the target,"
" uses `.insertAfter()`_"
msgstr ""

#: ../../reference/javascript.rst:135
msgid ""
"Renders the widget and inserts it as the following sibling of the target,"
" uses `.insertBefore()`_"
msgstr ""

#: ../../reference/javascript.rst:138
msgid ""
"All of these methods accept whatever the corresponding jQuery method "
"accepts (CSS selectors, DOM nodes or jQuery objects). They all return a "
"deferred_ and are charged with three tasks:"
msgstr ""

#: ../../reference/javascript.rst:142
msgid "rendering the widget's root element via :func:`~Widget.renderElement`"
msgstr ""

#: ../../reference/javascript.rst:144
msgid ""
"inserting the widget's root element in the DOM using whichever jQuery "
"method they match"
msgstr ""

#: ../../reference/javascript.rst:146
msgid "starting the widget, and returning the result of starting it"
msgstr ""

#: ../../reference/javascript.rst:150
msgid ""
"asynchronous startup of the widget once it's been injected in the DOM, "
"generally used to perform asynchronous RPC calls to fetch whatever remote"
" data is necessary for the widget to do its work."
msgstr ""

#: ../../reference/javascript.rst:154
msgid "Must return a deferred_ to indicate when its work is done."
msgstr ""

#: ../../reference/javascript.rst:156
msgid ""
"A widget is *not guaranteed* to work correctly until its "
":func:`~Widget.start` method has finished executing. The widget's "
"parent/creator must wait for a widget to be fully started before "
"interacting with it"
msgstr ""

#: ../../reference/javascript.rst:161 ../../reference/javascript.rst:202
msgid "deferred_ object"
msgstr ""

#: ../../reference/javascript.rst:163
msgid "widget destruction and cleanup"
msgstr ""

#: ../../reference/javascript.rst:167
msgid ""
"destroys the widget's children, unbinds its events and removes its root "
"from the DOM. Automatically called when the widget's parent is destroyed,"
" must be called explicitly if the widget has no parents or if it is "
"removed but its parent remains."
msgstr ""

#: ../../reference/javascript.rst:172
msgid "A widget being destroyed is automatically unlinked from its parent."
msgstr ""

#: ../../reference/javascript.rst:174
msgid "Related to widget destruction is an important utility method:"
msgstr ""

#: ../../reference/javascript.rst:178
msgid ""
"A significant issue with RPC and destruction is that an RPC call may take"
" a long time to execute and return while a widget is being destroyed or "
"after it has been destroyed, trying to execute its operations on a widget"
" in a broken/invalid state."
msgstr ""

#: ../../reference/javascript.rst:183
msgid "This is a frequent source of errors or strange behaviors."
msgstr ""

#: ../../reference/javascript.rst:185
msgid ""
":func:`~Widget.alive` can be used to wrap an RPC call, ensuring that "
"whatever operations should be executed when the call ends are only "
"executed if the widget is still alive::"
msgstr ""

#: ../../reference/javascript.rst:197
msgid "a deferred_ object to wrap"
msgstr ""

#: ../../reference/javascript.rst:198
msgid ""
"by default, if the RPC call returns after the widget has been destroyed "
"the returned deferred_ is left in limbo (neither resolved nor rejected). "
"If ``reject`` is set to ``true``, the deferred_ will be rejected instead."
msgstr ""

#: ../../reference/javascript.rst:206
msgid "``true`` if the widget is being or has been destroyed, ``false`` otherwise"
msgstr ""

#: ../../reference/javascript.rst:210
msgid "Accessing DOM content"
msgstr ""

#: ../../reference/javascript.rst:213
msgid ""
"Because a widget is only responsible for the content below its DOM root, "
"there"
msgstr ""

#: ../../reference/javascript.rst:213
msgid "is a shortcut for selecting sub-sections of a widget's DOM:"
msgstr ""

#: ../../reference/javascript.rst:217
msgid "Applies the CSS selector specified as parameter to the widget's DOM root::"
msgstr ""

#: ../../reference/javascript.rst:222
msgid "is functionally identical to::"
msgstr ""

#: ../../reference/javascript.rst:226
msgid "CSS selector"
msgstr ""

#: ../../reference/javascript.rst:227
msgid "jQuery object"
msgstr ""

#: ../../reference/javascript.rst:229
msgid "this helper method is similar to ``Backbone.View.$``"
msgstr ""

#: ../../reference/javascript.rst:232
msgid "Resetting the DOM root"
msgstr ""

#: ../../reference/javascript.rst:236
msgid ""
"Re-sets the widget's DOM root to the provided element, also handles re-"
"setting the various aliases of the DOM root as well as unsetting and re-"
"setting delegated events."
msgstr ""

#: ../../reference/javascript.rst:240
msgid "a DOM element or jQuery object to set as the widget's DOM root"
msgstr ""

#: ../../reference/javascript.rst:243
msgid "should be mostly compatible with `Backbone's setElement`_"
msgstr ""

#: ../../reference/javascript.rst:247
msgid "DOM events handling"
msgstr ""

#: ../../reference/javascript.rst:249
msgid ""
"A widget will generally need to respond to user action within its section"
" of the page. This entails binding events to DOM elements."
msgstr ""

#: ../../reference/javascript.rst:252
msgid "To this end, :class:`~Widget` provides a shortcut:"
msgstr ""

#: ../../reference/javascript.rst:256
msgid ""
"Events are a mapping of an event selector (an event name and an optional "
"CSS selector separated by a space) to a callback. The callback can be the"
" name of a widget's method or a function object. In either case, the "
"``this`` will be set to the widget::"
msgstr ""

#: ../../reference/javascript.rst:268
msgid ""
"The selector is used for jQuery's `event delegation`_, the callback will "
"only be triggered for descendants of the DOM root matching the selector\\"
" [#eventsdelegation]_. If the selector is left out (only an event name is"
" specified), the event will be set directly on the widget's DOM root."
msgstr ""

#: ../../reference/javascript.rst:276
msgid ""
"This method is in charge of binding :attr:`~Widget.events` to the DOM. It"
" is automatically called after setting the widget's DOM root."
msgstr ""

#: ../../reference/javascript.rst:279
msgid ""
"It can be overridden to set up more complex events than the "
":attr:`~Widget.events` map allows, but the parent should always be called"
" (or :attr:`~Widget.events` won't be handled correctly)."
msgstr ""

#: ../../reference/javascript.rst:285
msgid ""
"This method is in charge of unbinding :attr:`~Widget.events` from the DOM"
" root when the widget is destroyed or the DOM root is reset, in order to "
"avoid leaving \"phantom\" events."
msgstr ""

#: ../../reference/javascript.rst:289
msgid ""
"It should be overridden to un-set any event set in an override of "
":func:`~Widget.delegateEvents`."
msgstr ""

#: ../../reference/javascript.rst:292
msgid ""
"this behavior should be compatible with `Backbone's delegateEvents`_, "
"apart from not accepting any argument."
msgstr ""

#: ../../reference/javascript.rst:296
msgid "Subclassing Widget"
msgstr ""

#: ../../reference/javascript.rst:298
msgid ""
":class:`~Widget` is subclassed in the standard manner (via the "
":func:`~Class.extend` method), and provides a number of abstract "
"properties and concrete methods (which you may or may not want to "
"override). Creating a subclass looks like this::"
msgstr ""

#: ../../reference/javascript.rst:329
msgid "The new class can then be used in the following manner::"
msgstr ""

#: ../../reference/javascript.rst:336
msgid ""
"After these two lines have executed (and any promise returned by "
":func:`~Widget.appendTo` has been resolved if needed), the widget is "
"ready to be used."
msgstr ""

#: ../../reference/javascript.rst:340
msgid ""
"the insertion methods will start the widget themselves, and will return "
"the result of :func:`~Widget.start()`."
msgstr ""

#: ../../reference/javascript.rst:343
msgid ""
"If for some reason you do not want to call these methods, you will have "
"to first call :func:`~Widget.render()` on the widget, then insert it into"
" your DOM and start it."
msgstr ""

#: ../../reference/javascript.rst:347
msgid ""
"If the widget is not needed anymore (because it's transient), simply "
"terminate it::"
msgstr ""

#: ../../reference/javascript.rst:352
msgid ""
"will unbind all DOM events, remove the widget's content from the DOM and "
"destroy all widget data."
msgstr ""

#: ../../reference/javascript.rst:356
msgid "Development Guidelines"
msgstr ""

#: ../../reference/javascript.rst:358
msgid ""
"Identifiers (``id`` attribute) should be avoided. In generic applications"
" and modules, ``id`` limits the re-usability of components and tends to "
"make code more brittle. Most of the time, they can be replaced with "
"nothing, classes or keeping a reference to a DOM node or jQuery element."
msgstr ""

#: ../../reference/javascript.rst:363
msgid ""
"If an ``id`` is absolutely necessary (because a third-party library "
"requires one), the id should be partially generated using "
"``_.uniqueId()`` e.g.::"
msgstr ""

#: ../../reference/javascript.rst:367
msgid ""
"Avoid predictable/common CSS class names. Class names such as \"content\""
" or \"navigation\" might match the desired meaning/semantics, but it is "
"likely an other developer will have the same need, creating a naming "
"conflict and unintended behavior. Generic class names should be prefixed "
"with e.g. the name of the component they belong to (creating \"informal\""
" namespaces, much as in C or Objective-C)."
msgstr ""

#: ../../reference/javascript.rst:373
msgid ""
"Global selectors should be avoided. Because a component may be used "
"several times in a single page (an example in Odoo is dashboards), "
"queries should be restricted to a given component's scope. Unfiltered "
"selections such as ``$(selector)`` or "
"``document.querySelectorAll(selector)`` will generally lead to unintended"
" or incorrect behavior.  Odoo Web's :class:`~Widget` has an attribute "
"providing its DOM root (:attr:`~Widget.$el`), and a shortcut to select "
"nodes directly (:func:`~Widget.$`)."
msgstr ""

#: ../../reference/javascript.rst:381
msgid ""
"More generally, never assume your components own or controls anything "
"beyond its own personal :attr:`~Widget.$el`"
msgstr ""

#: ../../reference/javascript.rst:383
msgid "html templating/rendering should use QWeb unless absolutely trivial."
msgstr ""

#: ../../reference/javascript.rst:384
msgid ""
"All interactive components (components displaying information to the "
"screen or intercepting DOM events) must inherit from :class:`~Widget` and"
" correctly implement and use its API and life cycle."
msgstr ""

#: ../../reference/javascript.rst:412 ../../reference/javascript.rst:1142
msgid "RPC"
msgstr ""

#: ../../reference/javascript.rst:414
msgid ""
"To display and interact with data, calls to the Odoo server are "
"necessary. This is performed using :abbr:`RPC <Remote Procedure Call>`."
msgstr ""

#: ../../reference/javascript.rst:417
msgid ""
"Odoo Web provides two primary APIs to handle this: a low-level JSON-RPC "
"based API communicating with the Python section of Odoo Web (and of your "
"module, if you have a Python part) and a high-level API above that "
"allowing your code to talk directly to high-level Odoo models."
msgstr ""

#: ../../reference/javascript.rst:422
msgid ""
"All networking APIs are :ref:`asynchronous <reference/async>`. As a "
"result, all of them will return Deferred_ objects (whether they resolve "
"those with values or not). Understanding how those work before before "
"moving on is probably necessary."
msgstr ""

#: ../../reference/javascript.rst:428
msgid "High-level API: calling into Odoo models"
msgstr ""

#: ../../reference/javascript.rst:430
msgid ""
"Access to Odoo object methods (made available through XML-RPC from the "
"server) is done via :class:`Model` (exported in ``web.Model``). It maps "
"onto the Odoo server objects via two primary methods, :func:`~Model.call`"
" and :func:`~Model.query`."
msgstr ""

#: ../../reference/javascript.rst:435
msgid ""
":func:`~Model.call` is a direct mapping to the corresponding method of "
"the Odoo server object. Its usage is similar to that of the Odoo Model "
"API, with three differences:"
msgstr ""

#: ../../reference/javascript.rst:439
msgid ""
"The interface is :ref:`asynchronous <reference/async>`, so instead of "
"returning results directly RPC method calls will return Deferred_ "
"instances, which will themselves resolve to the result of the matching "
"RPC call."
msgstr ""

#: ../../reference/javascript.rst:444
msgid ""
"Because ECMAScript 3/Javascript 1.5 doesnt feature any equivalent to "
"``__getattr__`` or ``method_missing``, there needs to be an explicit "
"method to dispatch RPC methods."
msgstr ""

#: ../../reference/javascript.rst:448
msgid ""
"No notion of pooler, the model proxy is instantiated where needed, not "
"fetched from an other (somewhat global) object::"
msgstr ""

#: ../../reference/javascript.rst:458
msgid ""
":func:`~Model.query` is a shortcut for a builder-style interface to "
"searches (``search`` + ``read`` in Odoo RPC terms). It returns a "
":class:`~openerp.web.Query` object which is immutable but allows building"
" new :class:`~openerp.web.Query` instances from the first one, adding new"
" properties or modifiying the parent object's::"
msgstr ""

#: ../../reference/javascript.rst:471
msgid ""
"The query is only actually performed when calling one of the query "
"serialization methods, :func:`~openerp.web.Query.all` and "
":func:`~openerp.web.Query.first`. These methods will perform a new RPC "
"call every time they are called."
msgstr ""

#: ../../reference/javascript.rst:476
msgid ""
"For that reason, it's actually possible to keep \"intermediate\" queries "
"around and use them differently/add new specifications on them."
msgstr ""

#: ../../reference/javascript.rst:483
msgid "name of the model this object is bound to"
msgstr ""

#: ../../reference/javascript.rst:487
msgid ""
"Calls the ``method`` method of the current model, with the provided "
"positional and keyword arguments."
msgstr ""

#: ../../reference/javascript.rst:490
msgid "method to call over rpc on the :attr:`~Model.name`"
msgstr ""

#: ../../reference/javascript.rst:492
msgid "positional arguments to pass to the method, optional"
msgstr ""

#: ../../reference/javascript.rst:494
msgid "keyword arguments to pass to the method, optional"
msgstr ""

#: ../../reference/javascript.rst:496
msgid "Deferred<>"
msgstr ""

#: ../../reference/javascript.rst:500
msgid "list of fields to fetch during the search"
msgstr ""

#: ../../reference/javascript.rst:502
msgid "a :class:`~openerp.web.Query` object representing the search to perform"
msgstr ""

#: ../../reference/javascript.rst:507
msgid ""
"The first set of methods is the \"fetching\" methods. They perform RPC "
"queries using the internal data of the object they're called on."
msgstr ""

#: ../../reference/javascript.rst:513
msgid ""
"Fetches the result of the current :class:`~openerp.web.Query` object's "
"search."
msgstr ""

#: ../../reference/javascript.rst:516
msgid "Deferred<Array<>>"
msgstr ""

#: ../../reference/javascript.rst:520
msgid ""
"Fetches the **first** result of the current :class:`~openerp.web.Query`, "
"or ``null`` if the current :class:`~openerp.web.Query` does have any "
"result."
msgstr ""

#: ../../reference/javascript.rst:524
msgid "Deferred<Object | null>"
msgstr ""

#: ../../reference/javascript.rst:528
msgid ""
"Fetches the number of records the current :class:`~openerp.web.Query` "
"would retrieve."
msgstr ""

#: ../../reference/javascript.rst:531
msgid "Deferred<Number>"
msgstr ""

#: ../../reference/javascript.rst:535
msgid ""
"Fetches the groups for the query, using the first specified grouping "
"parameter"
msgstr ""

#: ../../reference/javascript.rst:538
msgid ""
"Lists the levels of grouping asked of the server. Grouping can actually "
"be an array or varargs."
msgstr ""

#: ../../reference/javascript.rst:542
msgid "Deferred<Array<openerp.web.QueryGroup>> | null"
msgstr ""

#: ../../reference/javascript.rst:544
msgid ""
"The second set of methods is the \"mutator\" methods, they create a "
"**new** :class:`~openerp.web.Query` object with the relevant (internal) "
"attribute either augmented or replaced."
msgstr ""

#: ../../reference/javascript.rst:550
msgid "Adds the provided ``ctx`` to the query, on top of any existing context"
msgstr ""

#: ../../reference/javascript.rst:555
msgid ""
"Adds the provided domain to the query, this domain is ``AND``-ed to the "
"existing query domain."
msgstr ""

#: ../../reference/javascript.rst:560
msgid ""
"Sets the provided offset on the query. The new offset *replaces* the old "
"one."
msgstr ""

#: ../../reference/javascript.rst:565
msgid ""
"Sets the provided limit on the query. The new limit *replaces* the old "
"one."
msgstr ""

#: ../../reference/javascript.rst:570
msgid ""
"Overrides the model's natural order with the provided field "
"specifications. Behaves much like Django's :py:meth:`QuerySet.order_by "
"<django.db.models.query.QuerySet.order_by>`:"
msgstr ""

#: ../../reference/javascript.rst:574
msgid ""
"Takes 1..n field names, in order of most to least importance (the first "
"field is the first sorting key). Fields are provided as strings."
msgstr ""

#: ../../reference/javascript.rst:578
msgid ""
"A field specifies an ascending order, unless it is prefixed with the "
"minus sign \"``-``\" in which case the field is used in the descending "
"order"
msgstr ""

#: ../../reference/javascript.rst:582
msgid ""
"Divergences from Django's sorting include a lack of random sort (``?`` "
"field) and the inability to \"drill down\" into relations for sorting."
msgstr ""

#: ../../reference/javascript.rst:587
msgid "Aggregation (grouping)"
msgstr ""

#: ../../reference/javascript.rst:589
msgid ""
"Odoo has powerful grouping capacities, but they are kind-of strange in "
"that they're recursive, and level n+1 relies on data provided directly by"
" the grouping at level n. As a result, while "
":py:meth:`openerp.models.Model.read_group` works it's not a very "
"intuitive API."
msgstr ""

#: ../../reference/javascript.rst:595
msgid ""
"Odoo Web eschews direct calls to "
":py:meth:`~openerp.models.Model.read_group` in favor of calling a method "
"of :class:`~openerp.web.Query`, :py:meth:`much in the way it is one in "
"SQLAlchemy <sqlalchemy.orm.query.Query.group_by>` [#terminal]_::"
msgstr ""

#: ../../reference/javascript.rst:604
msgid ""
"This method is asynchronous when provided with 1..n fields (to group on) "
"as argument, but it can also be called without any field (empty fields "
"collection or nothing at all). In this case, instead of returning a "
"Deferred object it will return ``null``."
msgstr ""

#: ../../reference/javascript.rst:609
msgid ""
"When grouping criterion come from a third-party and may or may not list "
"fields (e.g. could be an empty list), this provides two ways to test the "
"presence of actual subgroups (versus the need to perform a regular query "
"for records):"
msgstr ""

#: ../../reference/javascript.rst:614
msgid "A check on ``group_by``'s result and two completely separate code paths::"
msgstr ""

#: ../../reference/javascript.rst:625
msgid ""
"Or a more coherent code path using :func:`when`'s ability to coerce "
"values into deferreds::"
msgstr ""

#: ../../reference/javascript.rst:637
msgid ""
"The result of a (successful) :func:`~openerp.web.Query.group_by` is an "
"array of :class:`~openerp.web.QueryGroup`:"
msgstr ""

#: ../../reference/javascript.rst:644
msgid "returns the group's attribute ``key``. Known attributes are:"
msgstr ""

#: ../../reference/javascript.rst:646
msgid "``grouped_on``"
msgstr ""

#: ../../reference/javascript.rst:647
msgid "which grouping field resulted from this group"
msgstr ""

#: ../../reference/javascript.rst:648
msgid "``value``"
msgstr ""

#: ../../reference/javascript.rst:649
msgid "``grouped_on``'s value for this group"
msgstr ""

#: ../../reference/javascript.rst:650
msgid "``length``"
msgstr ""

#: ../../reference/javascript.rst:651
msgid "the number of records in the group"
msgstr ""

#: ../../reference/javascript.rst:652
msgid "``aggregates``"
msgstr ""

#: ../../reference/javascript.rst:653
msgid "a {field: value} mapping of aggregations for the group"
msgstr ""

#: ../../reference/javascript.rst:657
msgid ""
"equivalent to :func:`Model.query` but pre-filtered to only include the "
"records within this group. Returns a :class:`~openerp.web.Query` which "
"can be further manipulated as usual."
msgstr ""

#: ../../reference/javascript.rst:664
msgid ""
"returns a deferred to an array of :class:`~openerp.web.QueryGroup` below "
"this one"
msgstr ""

#: ../../reference/javascript.rst:668
msgid "Low-level API: RPC calls to Python side"
msgstr ""

#: ../../reference/javascript.rst:670
msgid ""
"While the previous section is great for calling core OpenERP code (models"
" code), it does not work if you want to call the Python side of Odoo Web."
msgstr ""

#: ../../reference/javascript.rst:674
msgid ""
"For this, a lower-level API exists on on :class:`~Session` objects (the "
"class is exported in ``web.Session``, but an instance isusually available"
" through ``web.session``): the ``rpc`` method."
msgstr ""

#: ../../reference/javascript.rst:678
msgid ""
"This method simply takes an absolute path (the absolute URL of the JSON "
":ref:`route <reference/http/routing>` to call) and a mapping of "
"attributes to values (passed as keyword arguments to the Python method). "
"This function fetches the return value of the Python methods, converted "
"to JSON."
msgstr ""

#: ../../reference/javascript.rst:683
msgid ""
"For instance, to call the ``resequence`` of the "
":class:`~web.controllers.main.DataSet` controller::"
msgstr ""

#: ../../reference/javascript.rst:699
msgid "Web Client"
msgstr ""

#: ../../reference/javascript.rst:702
msgid "Javascript module system overview"
msgstr ""

#: ../../reference/javascript.rst:704
msgid ""
"A new module system (inspired from requirejs) has now been deployed. It "
"has many advantages over the Odoo version 8 system."
msgstr ""

#: ../../reference/javascript.rst:707
msgid ""
"loading order: dependencies are guaranteed to be loaded first, even if "
"files are not loaded in the correct order in the bundle files."
msgstr ""

#: ../../reference/javascript.rst:709
msgid "easier to split a file into smaller logical units."
msgstr ""

#: ../../reference/javascript.rst:710
msgid "no global variables: easier to reason."
msgstr ""

#: ../../reference/javascript.rst:711
msgid ""
"it is possible to examine every dependencies and dependants.  This makes "
"refactoring much simpler, and less risky."
msgstr ""

#: ../../reference/javascript.rst:714
msgid "It has also some disadvantages:"
msgstr ""

#: ../../reference/javascript.rst:716
msgid ""
"files are required to use the module system if they want to interact with"
" odoo, since the various objects are only available in the module system,"
" and not in global variables"
msgstr ""

#: ../../reference/javascript.rst:719
msgid ""
"circular dependencies are not supported.  It makes sense, but it means "
"that one needs to be careful."
msgstr ""

#: ../../reference/javascript.rst:722
msgid ""
"This is obviously a very large change and will require everyone to adopt "
"new habits.  For example, the variable openerp does not exist anymore.  "
"The new way of doing things is to import explicitely the module you need,"
" and declaring explicitely the objects you export.  Here is a simple "
"example::"
msgstr ""

#: ../../reference/javascript.rst:739
msgid ""
"This snippet shows a module named ``addon_name.service``.  It is defined "
"with the ``odoo.define`` function.  ``odoo.define`` takes a name and a "
"function for arguments:"
msgstr ""

#: ../../reference/javascript.rst:743
msgid ""
"The name is the concatenation of the name of the addon it is defined in "
"and a name describing its purpose."
msgstr ""

#: ../../reference/javascript.rst:745
msgid ""
"The function is the place where the javascript module is actually "
"defined.  It takes a function ``require`` as first argument, and returns "
"something (or not, depending if it needs to export something). The "
"``require`` function is used to get a handle on the dependencies. In this"
" case, it gives a handle on two javascript modules from the ``web`` "
"addon, namely ``web.utils`` and ``web.Model``."
msgstr ""

#: ../../reference/javascript.rst:752
msgid ""
"The idea is that you define what you need to import (by using the "
"``require`` function) and declare what you export (by returning "
"something).  The web client will then make sure that your code is loaded "
"properly."
msgstr ""

#: ../../reference/javascript.rst:757
msgid ""
"Modules are contained in a file, but a file can define several modules "
"(however, it is better to keep them in separate files)."
msgstr ""

#: ../../reference/javascript.rst:760
msgid ""
"Each module can return a deferred. In that case, the module is marked as "
"loaded only when the deferred is resolved, and its value is equal to the "
"resolved value. The module can be rejected (unloaded). This will be "
"logged in the console as info."
msgstr ""

#: ../../reference/javascript.rst:764
msgid ""
"``Missing dependencies``: These modules do not appear in the page. It is "
"possible that the JavaScript file is not in the page or that the module "
"name is wrong"
msgstr ""

#: ../../reference/javascript.rst:767
msgid "``Failed modules``: A javascript error is detected"
msgstr ""

#: ../../reference/javascript.rst:769
msgid ""
"``Rejected modules``: The module returns a rejected deferred. It (and its"
" dependent modules) is not loaded."
msgstr ""

#: ../../reference/javascript.rst:772
msgid "``Rejected linked modules``: Modules who depend on a rejected module"
msgstr ""

#: ../../reference/javascript.rst:774
msgid "``Non loaded modules``: Modules who depend on a missing or a failed module"
msgstr ""

#: ../../reference/javascript.rst:779
msgid "Web client structure"
msgstr ""

#: ../../reference/javascript.rst:781
msgid ""
"The web client files have been refactored into smaller and simpler files."
" Here is a description of the current file structure:"
msgstr ""

#: ../../reference/javascript.rst:784
msgid ""
"the ``framework/`` folder contains all basic low level modules.  The "
"modules here are supposed to be generic.  Some of them are:"
msgstr ""

#: ../../reference/javascript.rst:787
msgid "``web.ajax`` implements rpc calls"
msgstr ""

#: ../../reference/javascript.rst:788
msgid ""
"``web.core`` is a generic modules.  It exports various useful objects and"
" functions, such as ``qweb``, ``_t`` or the main bus."
msgstr ""

#: ../../reference/javascript.rst:790
msgid "``web.Widget`` contains the widget class"
msgstr ""

#: ../../reference/javascript.rst:791
msgid ""
"``web.Model`` is an abstraction over ``web.ajax`` to make calls to the "
"server model methods"
msgstr ""

#: ../../reference/javascript.rst:793
msgid "``web.session`` is the former ``openerp.session``"
msgstr ""

#: ../../reference/javascript.rst:794
msgid "``web.utils`` for useful code snippets"
msgstr ""

#: ../../reference/javascript.rst:795
msgid "``web.time`` for every time-related generic functions"
msgstr ""

#: ../../reference/javascript.rst:796
msgid "the ``views/`` folder contains all view definitions"
msgstr ""

#: ../../reference/javascript.rst:797
msgid "``widgets/`` is for standalone widgets"
msgstr ""

#: ../../reference/javascript.rst:799
msgid "The ``js/`` folder also contains some important files:"
msgstr ""

#: ../../reference/javascript.rst:801
msgid "``action_manager.js`` is the ActionManager class"
msgstr ""

#: ../../reference/javascript.rst:802
msgid "``boot.js`` is the file actually implementing the module system"
msgstr ""

#: ../../reference/javascript.rst:803
msgid "``menu.js`` is the definition of the top menu"
msgstr ""

#: ../../reference/javascript.rst:804
msgid "``web_client.js`` is for the root widget WebClient"
msgstr ""

#: ../../reference/javascript.rst:805
msgid "``view_manager.js`` contains the ViewManager"
msgstr ""

#: ../../reference/javascript.rst:807
msgid ""
"The two other files are ``tour.js`` for the tours and "
"``compatibility.js``. The latter file is a compatibility layer bridging "
"the old system to the new module system.  This is where every module "
"names are exported to the global variable ``openerp``.  In theory, our "
"addons should work without ever using the variable ``openerp``, and the "
"compatibility module can be disabled safely."
msgstr ""

#: ../../reference/javascript.rst:815
msgid "Javascript conventions"
msgstr ""

#: ../../reference/javascript.rst:817
msgid "Here are some basic conventions for the javascript code:"
msgstr ""

#: ../../reference/javascript.rst:819
msgid ""
"declare all your dependencies at the top of the module.  Also, they "
"should be sorted alphabetically by module name.  This makes it easier to "
"understand your module."
msgstr ""

#: ../../reference/javascript.rst:822
msgid "declare all exports at the end."
msgstr ""

#: ../../reference/javascript.rst:823
msgid "add the ``use strict`` statement at the beginning of every module"
msgstr ""

#: ../../reference/javascript.rst:824
msgid "always name your module properly: ``addon_name.description``."
msgstr ""

#: ../../reference/javascript.rst:825
msgid ""
"use capital letters for classes (for example, ``ActionManager`` is "
"defined in the module ``web.ActionManager``), and lowercase for "
"everything else (for example, ``ajax`` is defined in ``web.ajax``)."
msgstr ""

#: ../../reference/javascript.rst:828
msgid "declare one module per file"
msgstr ""

#: ../../reference/javascript.rst:835
msgid "Testing in Odoo Web Client"
msgstr ""

#: ../../reference/javascript.rst:838
msgid "Javascript Unit Testing"
msgstr ""

#: ../../reference/javascript.rst:840
msgid ""
"Odoo Web includes means to unit-test both the core code of Odoo Web and "
"your own javascript modules. On the javascript side, unit-testing is "
"based on QUnit_ with a number of helpers and extensions for better "
"integration with Odoo."
msgstr ""

#: ../../reference/javascript.rst:845
msgid ""
"To see what the runner looks like, find (or start) an Odoo server with "
"the web client enabled, and navigate to ``/web/tests`` This will show the"
" runner selector, which lists all modules with javascript unit tests, and"
" allows starting any of them (or all javascript tests in all modules at "
"once)."
msgstr ""

#: ../../reference/javascript.rst:854
msgid ""
"Clicking any runner button will launch the corresponding tests in the "
"bundled QUnit_ runner:"
msgstr ""

#: ../../reference/javascript.rst:861
msgid "Writing a test case"
msgstr ""

#: ../../reference/javascript.rst:863
msgid ""
"The first step is to list the test file(s). This is done through the "
"``test`` key of the Odoo manifest, by adding javascript files to it:"
msgstr ""

#: ../../reference/javascript.rst:875
msgid "and to create the corresponding test file(s)"
msgstr ""

#: ../../reference/javascript.rst:879
msgid ""
"Test files which do not exist will be ignored, if all test files of a "
"module are ignored (can not be found), the test runner will consider that"
" the module has no javascript tests."
msgstr ""

#: ../../reference/javascript.rst:883
msgid ""
"After that, refreshing the runner selector will display the new module "
"and allow running all of its (0 so far) tests:"
msgstr ""

#: ../../reference/javascript.rst:889
msgid "The next step is to create a test case::"
msgstr ""

#: ../../reference/javascript.rst:897
msgid ""
"All testing helpers and structures live in the ``openerp.testing`` "
"module. Odoo tests live in a :func:`~openerp.testing.section`, which is "
"itself part of a module. The first argument to a section is the name of "
"the section, the second one is the section body."
msgstr ""

#: ../../reference/javascript.rst:902
msgid ""
":func:`test <openerp.testing.case>`, provided by the "
":func:`~openerp.testing.section` to the callback, is used to register a "
"given test case which will be run whenever the test runner actually does "
"its job. Odoo Web test case use standard `QUnit assertions`_ within them."
msgstr ""

#: ../../reference/javascript.rst:908
msgid ""
"Launching the test runner at this point will run the test and display the"
" corresponding assertion message, with red colors indicating the test "
"failed:"
msgstr ""

#: ../../reference/javascript.rst:915
msgid ""
"Fixing the test (by replacing ``false`` to ``true`` in the assertion) "
"will make it pass:"
msgstr ""

#: ../../reference/javascript.rst:922
msgid "Assertions"
msgstr ""

#: ../../reference/javascript.rst:924
msgid ""
"As noted above, Odoo Web's tests use `qunit assertions`_. They are "
"available globally (so they can just be called without references to "
"anything). The following list is available:"
msgstr ""

#: ../../reference/javascript.rst:930
msgid "checks that ``state`` is truthy (in the javascript sense)"
msgstr ""

#: ../../reference/javascript.rst:934
msgid ""
"checks that the actual (produced by a method being tested) and expected "
"values are identical (roughly equivalent to ``ok(actual === expected, "
"message)``)"
msgstr ""

#: ../../reference/javascript.rst:940
msgid ""
"checks that the actual and expected values are *not* identical (roughly "
"equivalent to ``ok(actual !== expected, message)``)"
msgstr ""

#: ../../reference/javascript.rst:945
msgid ""
"deep comparison between actual and expected: recurse into containers "
"(objects and arrays) to ensure that they have the same keys/number of "
"elements, and the values match."
msgstr ""

#: ../../reference/javascript.rst:951
msgid "inverse operation to :func:`deepEqual`"
msgstr ""

#: ../../reference/javascript.rst:955
msgid ""
"checks that, when called, the ``block`` throws an error. Optionally "
"validates that error against ``expected``."
msgstr ""

#: ../../reference/javascript.rst:959
msgid ""
"if a regexp, checks that the thrown error's message matches the regular "
"expression. If an error type, checks that the thrown error is of that "
"type."
msgstr ""

#: ../../reference/javascript.rst:967
msgid ""
"checks that ``actual`` and ``expected`` are loosely equal, using the "
"``==`` operator and its coercion rules."
msgstr ""

#: ../../reference/javascript.rst:972
msgid "inverse operation to :func:`equal`"
msgstr ""

#: ../../reference/javascript.rst:975
msgid "Getting an Odoo instance"
msgstr ""

#: ../../reference/javascript.rst:977
msgid ""
"The Odoo instance is the base through which most Odoo Web modules "
"behaviors (functions, objects, …) are accessed. As a result, the test "
"framework automatically builds one, and loads the module being tested and"
" all of its dependencies inside it. This new instance is provided as the "
"first positional parameter to your test cases. Let's observe by adding "
"javascript code (not test code) to the test module:"
msgstr ""

#: ../../reference/javascript.rst:1009
msgid ""
"and then adding a new test case, which simply checks that the "
"``instance`` contains all the expected stuff we created in the module::"
msgstr ""

#: ../../reference/javascript.rst:1021
msgid "DOM Scratchpad"
msgstr ""

#: ../../reference/javascript.rst:1023
msgid ""
"As in the wider client, arbitrarily accessing document content is "
"strongly discouraged during tests. But DOM access is still needed to e.g."
" fully initialize :class:`widgets <~openerp.Widget>` before testing them."
msgstr ""

#: ../../reference/javascript.rst:1028
msgid ""
"Thus, a test case gets a DOM scratchpad as its second positional "
"parameter, in a jQuery instance. That scratchpad is fully cleaned up "
"before each test, and as long as it doesn't do anything outside the "
"scratchpad your code can do whatever it wants::"
msgstr ""

#: ../../reference/javascript.rst:1046
msgid ""
"The top-level element of the scratchpad is not cleaned up, test cases can"
" add text or DOM children but shoud not alter ``$scratchpad`` itself."
msgstr ""

#: ../../reference/javascript.rst:1051
msgid "Loading templates"
msgstr ""

#: ../../reference/javascript.rst:1053
msgid ""
"To avoid the corresponding processing costs, by default templates are not"
" loaded into QWeb. If you need to render e.g. widgets making use of QWeb "
"templates, you can request their loading through the "
":attr:`~TestOptions.templates` option to the :func:`test case function "
"<openerp.testing.case>`."
msgstr ""

#: ../../reference/javascript.rst:1059
msgid ""
"This will automatically load all relevant templates in the instance's "
"qweb before running the test case:"
msgstr ""

#: ../../reference/javascript.rst:1097
msgid "Asynchronous cases"
msgstr ""

#: ../../reference/javascript.rst:1099
msgid ""
"The test case examples so far are all synchronous, they execute from the "
"first to the last line and once the last line has executed the test is "
"done. But the web client is full of :ref:`asynchronous code "
"<reference/async>`, and thus test cases need to be async-aware."
msgstr ""

#: ../../reference/javascript.rst:1104
msgid ""
"This is done by returning a :class:`deferred <Deferred>` from the case "
"callback::"
msgstr ""

#: ../../reference/javascript.rst:1119
msgid ""
"This example also uses the :class:`options parameter <TestOptions>` to "
"specify the number of assertions the case should expect, if less or more "
"assertions are specified the case will count as failed."
msgstr ""

#: ../../reference/javascript.rst:1123
msgid ""
"Asynchronous test cases *must* specify the number of assertions they will"
" run. This allows more easily catching situations where e.g. the test "
"architecture was not warned about asynchronous operations."
msgstr ""

#: ../../reference/javascript.rst:1129
msgid ""
"Asynchronous test cases also have a 2 seconds timeout: if the test does "
"not finish within 2 seconds, it will be considered failed. This pretty "
"much always means the test will not resolve. This timeout *only* applies "
"to the test itself, not to the setup and teardown processes."
msgstr ""

#: ../../reference/javascript.rst:1137
msgid ""
"If the returned deferred is rejected, the test will be failed unless "
":attr:`~TestOptions.fail_on_rejection` is set to ``false``."
msgstr ""

#: ../../reference/javascript.rst:1144
msgid ""
"An important subset of asynchronous test cases is test cases which need "
"to perform (and chain, to an extent) RPC calls."
msgstr ""

#: ../../reference/javascript.rst:1149
msgid ""
"Because they are a subset of asynchronous cases, RPC cases must also "
"provide a valid :attr:`assertions count <TestOptions.asserts>`."
msgstr ""

#: ../../reference/javascript.rst:1153
msgid ""
"To enable mock RPC, set the :attr:`rpc option <TestOptions.rpc>` to "
"``mock``. This will add a third parameter to the test case callback:"
msgstr ""

#: ../../reference/javascript.rst:1158
msgid ""
"Can be used in two different ways depending on the shape of the first "
"parameter:"
msgstr ""

#: ../../reference/javascript.rst:1161
msgid ""
"If it matches the pattern ``model:method`` (if it contains a colon, "
"essentially) the call will set up the mocking of an RPC call straight to "
"the Odoo server (through XMLRPC) as performed via e.g. "
":func:`openerp.web.Model.call`."
msgstr ""

#: ../../reference/javascript.rst:1166
msgid ""
"In that case, ``handler`` should be a function taking two arguments "
"``args`` and ``kwargs``, matching the corresponding arguments on the "
"server side and should simply return the value as if it were returned by "
"the Python XMLRPC handler::"
msgstr ""

#: ../../reference/javascript.rst:1191
msgid ""
"Otherwise, if it matches an absolute path (e.g. ``/a/b/c``) it will mock "
"a JSON-RPC call to a web client controller, such as "
"``/web/webclient/translations``. In that case, the handler takes a single"
" ``params`` argument holding all of the parameters provided over JSON-"
"RPC."
msgstr ""

#: ../../reference/javascript.rst:1197
msgid ""
"As previously, the handler should simply return the result value as if "
"returned by the original JSON-RPC handler::"
msgstr ""

#: ../../reference/javascript.rst:1223
msgid ""
"Mock handlers can contain assertions, these assertions should be part of "
"the assertions count (and if multiple calls are made to a handler "
"containing assertions, it multiplies the effective number of assertions)."
msgstr ""

#: ../../reference/javascript.rst:1229
msgid "Testing API"
msgstr ""

#: ../../reference/javascript.rst:1233
msgid ""
"A test section, serves as shared namespace for related tests (for "
"constants or values to only set up once). The ``body`` function should "
"contain the tests themselves."
msgstr ""

#: ../../reference/javascript.rst:1237
msgid ""
"Note that the order in which tests are run is essentially undefined, do "
"*not* rely on it."
msgstr ""

#: ../../reference/javascript.rst:1247
msgid ""
"Registers a test case callback in the test runner, the callback will only"
" be run once the runner is started (or maybe not at all, if the test is "
"filtered out)."
msgstr ""

#: ../../reference/javascript.rst:1258
msgid ""
"the various options which can be passed to "
":func:`~openerp.testing.section` or :func:`~openerp.testing.case`. Except"
" for :attr:`~TestOptions.setup` and :attr:`~TestOptions.teardown`, an "
"option on :func:`~openerp.testing.case` will overwrite the corresponding "
"option on :func:`~openerp.testing.section` so e.g. "
":attr:`~TestOptions.rpc` can be set for a "
":func:`~openerp.testing.section` and then differently set for some "
":func:`~openerp.testing.case` of that :func:`~openerp.testing.section`"
msgstr ""

#: ../../reference/javascript.rst:1272
msgid ""
"An integer, the number of assertions which should run during a normal "
"execution of the test. Mandatory for asynchronous tests."
msgstr ""

#: ../../reference/javascript.rst:1277
msgid ""
"Test case setup, run right before each test case. A section's "
":func:`~TestOptions.setup` is run before the case's own, if both are "
"specified."
msgstr ""

#: ../../reference/javascript.rst:1283
msgid ""
"Test case teardown, a case's :func:`~TestOptions.teardown` is run before "
"the corresponding section if both are present."
msgstr ""

#: ../../reference/javascript.rst:1288
msgid ""
"If the test is asynchronous and its resulting promise is rejected, fail "
"the test. Defaults to ``true``, set to ``false`` to not fail the test in "
"case of rejection::"
msgstr ""

#: ../../reference/javascript.rst:1307
msgid ""
"RPC method to use during tests, one of ``\"mock\"`` or ``\"rpc\"``. Any "
"other value will disable RPC for the test (if they were enabled by the "
"suite for instance)."
msgstr ""

#: ../../reference/javascript.rst:1313
msgid ""
"Whether the current module (and its dependencies)'s templates should be "
"loaded into QWeb before starting the test. A boolean, ``false`` by "
"default."
msgstr ""

#: ../../reference/javascript.rst:1317
msgid ""
"The test runner can also use two global configuration values set directly"
" on the ``window`` object:"
msgstr ""

#: ../../reference/javascript.rst:1320
msgid ""
"``oe_all_dependencies`` is an ``Array`` of all modules with a web "
"component, ordered by dependency (for a module ``A`` with dependencies "
"``A'``, any module of ``A'`` must come before ``A`` in the array)"
msgstr ""

#: ../../reference/javascript.rst:1326
msgid "Running through Python"
msgstr ""

#: ../../reference/javascript.rst:1328
msgid ""
"The web client includes the means to run these tests on the command-line "
"(or in a CI system), but while actually running it is pretty simple the "
"setup of the pre-requisite parts has some complexities."
msgstr ""

#: ../../reference/javascript.rst:1333
msgid ""
"Install PhantomJS_. It is a headless browser which allows automating "
"running and testing web pages. QUnitSuite_ uses it to actually run the "
"qunit_ test suite."
msgstr ""

#: ../../reference/javascript.rst:1337
msgid ""
"The PhantomJS_ website provides pre-built binaries for some platforms, "
"and your OS's package management probably provides it as well."
msgstr ""

#: ../../reference/javascript.rst:1341
msgid ""
"If you're building PhantomJS_ from source, I recommend preparing for some"
" knitting time as it's not exactly fast (it needs to compile both `Qt "
"<http://qt-project.org/>`_ and `Webkit <http://www.webkit.org/>`_, both "
"being pretty big projects)."
msgstr ""

#: ../../reference/javascript.rst:1348
msgid ""
"Because PhantomJS_ is webkit-based, it will not be able to test if "
"Firefox, Opera or Internet Explorer can correctly run the test suite (and"
" it is only an approximation for Safari and Chrome). It is therefore "
"recommended to *also* run the test suites in actual browsers once in a "
"while."
msgstr ""

#: ../../reference/javascript.rst:1356
msgid ""
"The version of PhantomJS_ this was build through is 1.7, previous "
"versions *should* work but are not actually supported (and tend to just "
"segfault when something goes wrong in PhantomJS_ itself so they're a pain"
" to debug)."
msgstr ""

#: ../../reference/javascript.rst:1361
msgid ""
"Install a new database with all relevant modules (all modules with a web "
"component at least), then restart the server"
msgstr ""

#: ../../reference/javascript.rst:1366
msgid ""
"For some tests, a source database needs to be duplicated. This operation "
"requires that there be no connection to the database being duplicated, "
"but Odoo doesn't currently break existing/outstanding connections, so "
"restarting the server is the simplest way to ensure everything is in the "
"right state."
msgstr ""

#: ../../reference/javascript.rst:1372
msgid ""
"Launch ``oe run-tests -d $DATABASE -mweb`` with the correct addons-path "
"specified (and replacing ``$DATABASE`` by the source database you created"
" above)"
msgstr ""

#: ../../reference/javascript.rst:1378
msgid ""
"If you leave out ``-mweb``, the runner will attempt to run all the tests "
"in all the modules, which may or may not work."
msgstr ""

#: ../../reference/javascript.rst:1381
msgid ""
"If everything went correctly, you should now see a list of tests with "
"(hopefully) ``ok`` next to their names, closing with a report of the "
"number of tests run and the time it took:"
msgstr ""

#: ../../reference/javascript.rst:1388
msgid ""
"Congratulation, you have just performed a successful \"offline\" run of "
"the OpenERP Web test suite."
msgstr ""

#: ../../reference/javascript.rst:1393
msgid ""
"Note that this runs all the Python tests for the ``web`` module, but all "
"the web tests for all of Odoo. This can be surprising."
msgstr ""

#: ../../reference/javascript.rst:1404
msgid "not all DOM events are compatible with events delegation"
msgstr ""

#: ../../reference/javascript.rst:1407
msgid ""
"with a small twist: :py:meth:`sqlalchemy.orm.query.Query.group_by` is not"
" terminal, it returns a query which can still be altered."
msgstr ""

